{"version":3,"sources":["serviceWorker.ts","api/tasksApi.ts","app/app-reducer.ts","helpers/error-helpers.ts","features/Todolists/task-reducer.ts","api/todoApi.ts","features/Todolists/todo-reducer.ts","app/Redux-store.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/Todolists/Todolist/Task/Task.tsx","features/Todolists/Todolist/Todolist.tsx","features/Todolists/Todolists.tsx","components/ErrorSnackBar/ErrorSnackbar.tsx","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","tasksAPI","todolistId","get","then","res","data","title","post","taskId","delete","model","put","initState","status","error","setAppError","type","setAppStatus","handleServerAppError","dispatch","messages","length","handleServerNetworkError","message","initialState","removeTaskAC","payload","changeTaskStatusAC","changeTaskTitleAC","setTaskAC","tasks","todoListId","toDoAPI","removeTodoListAC","id","changeTodoListTitleAC","rootReducer","combineReducers","state","action","filter","t","task","map","todolist","copyState","stateCopy","todos","forEach","tl","todoLists","entityStatus","app","store","createStore","applyMiddleware","thunk","useTypedSelector","useSelector","AddItemForm","React","memo","callBack","disabled","useState","newTaskTitle","setNewTaskTitle","setError","TextField","variant","value","size","color","onChange","e","currentTarget","onKeyPress","key","trim","helperText","label","sx","input","height","IconButton","onClick","AddBox","EditableSpan","props","editMode","setEditMode","setTitle","onEditMode","offEditMode","width","onBlur","autoFocus","onDoubleClick","ModeEditOutline","fontSize","Task","changeTaskTitle","changeTaskStatus","removeTask","changeTaskTitleHandler","useCallback","ListItem","disableGutters","divider","paddingTop","display","justifyContent","className","Completed","Checkbox","checked","New","Todolist","useDispatch","useEffect","a","items","resultCode","deleteTask","addTask","item","createFetchedTask","getState","find","console","warn","deadline","description","priority","startDate","updateFetchedTaskStatus","changeTodolistTitle","updateFetchedTodoTitle","removeTodolist","changeButtonFilter","changeTodoListFilterAC","updateFetchedTaskTitle","taskForTodolist","tasksElements","Typography","align","List","Button","TodoLists","todolistComponents","tasksForRender","Grid","Paper","elevation","padding","Alert","ref","ErrorSnackbar","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","App","addTodolist","createTodolist","AppBar","position","Toolbar","edge","aria-label","mr","component","flexGrow","LinearProgress","Container","fixed","container","marginBottom","spacing","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"qMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,ICmCMC,EAMAC,E,iFAzDNC,EAAWC,IAAMC,OAAO,CAC1BC,QAAS,+CACTC,iBAAiB,EACjBC,QAAS,CACL,UAAW,0CAKNC,EAAW,SACXC,GACL,OAAOP,EAASQ,IAAT,sBAA+CD,EAA/C,WAAmEE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAFrFL,EAAW,SAITC,EAAoBK,GAC3B,OAAOZ,EAASa,KAAT,sBAA6EN,EAA7E,UAAiG,CAACK,WALpGN,EAAW,SAOTC,EAAoBO,GAC3B,OAAOd,EAASe,OAAT,sBAAmDR,EAAnD,kBAAuEO,KARzER,EAAW,SAUHC,EAAoBO,EAAgBE,GACjD,OAAOhB,EAASiB,IAAT,sBAAgDV,EAAhD,kBAAoEO,GAAUE,IAXhFV,EAAW,SAaJC,EAAoBO,EAAgBE,GAChD,OAAOhB,EAASiB,IAAT,sBAAgDV,EAAhD,kBAAoEO,GAAUE,K,SA4BjFlB,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAMAC,O,aAAAA,I,mBAAAA,I,WAAAA,I,uBAAAA,I,kBAAAA,M,KC3DZ,IAAMmB,EAA2B,CAC7BC,OAAQ,OACRC,MAAO,MAgBEC,EAAc,SAACD,GAAD,MAA2B,CAACE,KAAK,gBAAgBF,UAC/DG,EAAe,SAACJ,GAAD,MAAyB,CAACG,KAAK,iBAAiBH,WCd/DK,EAAuB,SAAIb,EAA4Bc,GAC5Dd,EAAKe,SAASC,OACdF,EAASJ,EAAYV,EAAKe,SAAS,KAEnCD,EAASJ,EAAY,+BAEzBI,EAASF,EAAa,YAGbK,EAA2B,SAACR,EAA0BK,GAC/DA,EAASJ,EAAYD,EAAMS,QAAUT,EAAMS,QAAU,wBACrDJ,EAASF,EAAa,YCTfO,EAA8B,GA8C5BC,EAAe,SAACjB,EAAgBP,GAAjB,MAAyC,CACjEe,KAAM,oBACNU,QAAS,CAAClB,SAAQP,gBAGT0B,EAAqB,SAACd,EAAsBL,EAAgBP,GAAvC,MAC7B,CACGe,KAAM,2BACNU,QAAS,CACLb,SACAL,SACAP,gBAGC2B,EAAoB,SAACtB,EAAeE,EAAgBP,GAAhC,MAC5B,CACGe,KAAM,0BACNU,QAAS,CACLpB,QACAE,SACAP,gBAGC4B,EAAY,SAACC,EAAgCC,GAAjC,MACpB,CAACf,KAAM,kBAAmBU,QAAS,CAACI,QAAOC,gBC3E1CrC,EAAWC,IAAMC,OAAO,CAC1BC,QAAS,+CACTC,iBAAiB,EACjBC,QAAS,CACL,UAAW,0CAKNiC,EAAU,WAEf,OAAOtC,EAASQ,IAAqB,gBAFhC8B,EAAU,SAIR1B,GACP,OAAOZ,EAASa,KAAT,cAAqE,CAACD,UACxEH,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SANhB2B,EAAU,SAQR/B,GACP,OAAOP,EAASe,OAAT,sBAAmDR,KATrD+B,EAAU,SAWH/B,EAAoBK,GAChC,OAAOZ,EAASiB,IAAT,sBAAgDV,GAAc,CAACK,WCjB1EkB,EAAsC,GAsB7BS,EAAmB,SAACC,GAAD,MAAiB,CAAClB,KAAM,wBAAyBU,QAAS,CAACQ,QAG9EC,EAAwB,SAACD,EAAY5B,GAAb,MAAgC,CACjEU,KAAM,8BAA+BU,QAAS,CAACpB,QAAO4B,Q,QCvBpDE,EAAcC,YAAgB,CAChCP,MHDuB,WAAmE,IAAlEQ,EAAiE,uDAAzDd,EAAce,EAA2C,uCACzF,OAAQA,EAAOvB,MACX,IAAK,oBACD,OAAO,2BACAsB,GADP,kBACeC,EAAOb,QAAQzB,WAAaqC,EAAMC,EAAOb,QAAQzB,YAAYuC,QAAO,SAAAC,GAAC,OAC5EA,EAAEP,KAAOK,EAAOb,QAAQlB,YAEpC,IAAK,iBACD,OAAO,2BACA8B,GADP,kBAEKC,EAAOb,QAAQgB,KAAKX,WAFzB,CAEuCQ,EAAOb,QAAQgB,MAFtD,mBAE+DJ,EAAMC,EAAOb,QAAQgB,KAAKX,gBAE7F,IAAK,2BACD,OAAO,2BACAO,GADP,kBACeC,EAAOb,QAAQzB,WAAaqC,EAAMC,EAAOb,QAAQzB,YAAY0C,KAAI,SAAAF,GAAC,OACzEA,EAAEP,KAAOK,EAAOb,QAAQlB,OAAxB,2BAAqCiC,GAArC,IAAwC5B,OAAQ0B,EAAOb,QAAQb,SAAU4B,OAErF,IAAK,0BACD,OAAO,2BACAH,GADP,kBACeC,EAAOb,QAAQzB,WAAaqC,EAAMC,EAAOb,QAAQzB,YAAY0C,KAAI,SAAAF,GAAC,OACzEA,EAAEP,KAAOK,EAAOb,QAAQlB,OAAxB,2BAAqCiC,GAArC,IAAwCnC,MAAOiC,EAAOb,QAAQpB,QAASmC,OAEnF,IAAK,kBACD,OAAO,2BAAIH,GAAX,kBAAmBC,EAAOb,QAAQK,WAAaQ,EAAOb,QAAQI,QAClE,IAAK,qBACD,OAAO,2BAAIQ,GAAX,kBAAmBC,EAAOb,QAAQkB,SAASV,GAAK,KACpD,IAAK,wBACD,IAAMW,EAAS,eAAOP,GAEtB,cADOO,EAAUN,EAAOb,QAAQQ,IACzBW,EACX,IAAK,kBACD,IAAMC,EAAS,eAAOR,GAItB,OAHAC,EAAOQ,MAAMC,SAAQ,SAACC,GAClBH,EAAUG,EAAGf,IAAM,MAEhBY,EAEX,QACI,OAAOR,IGpCfY,UDHuB,WAA2E,IAA1EZ,EAAyE,uDAAjEd,EAAce,EAAmD,uCACjG,OAAQA,EAAOvB,MACX,IAAK,wBACD,OAAOsB,EAAME,QAAO,SAAAS,GAAE,OAAIA,EAAGf,KAAOK,EAAOb,QAAQQ,MACvD,IAAK,qBACD,MAAM,CAAN,2BAAYK,EAAOb,QAAQkB,UAA3B,IAAqCJ,OAAO,MAAMW,aAAa,UAA/D,mBAA0Eb,IAC9E,IAAK,sCACD,OAAOA,EAAMK,KAAI,SAAAM,GAAE,OAAIA,EAAGf,KAAOK,EAAOb,QAAQQ,GAAzB,2BAAkCe,GAAlC,IAAsCE,aAAcZ,EAAOb,QAAQb,SAAUoC,KACxG,IAAK,8BACD,OAAOX,EAAMK,KAAI,SAAAM,GAAE,OAAIA,EAAGf,KAAOK,EAAOb,QAAQQ,GAAzB,2BAAkCe,GAAlC,IAAsC3C,MAAOiC,EAAOb,QAAQpB,QAAS2C,KAChG,IAAK,+BACD,OAAOX,EAAMK,KAAI,SAAAM,GAAE,OAAIA,EAAGf,KAAOK,EAAOb,QAAQQ,GAAzB,2BAAkCe,GAAlC,IAAsCT,OAAQD,EAAOb,QAAQc,SAAUS,KAClG,IAAK,kBACD,OAAOV,EAAOQ,MAAMJ,KAAI,SAAAM,GAAE,kCAASA,GAAT,IAAaT,OAAQ,MAAOW,aAAa,YACvE,QACI,OAAOb,ICXfc,ILNsB,WAA6E,IAA5Ed,EAA2E,uDAApD1B,EAAW2B,EAAyC,uCAClG,OAAQA,EAAOvB,MACX,IAAK,iBACD,OAAO,2BAAIsB,GAAX,IAAkBzB,OAAO0B,EAAO1B,SACpC,IAAK,gBACD,OAAO,2BAAIyB,GAAX,IAAkBxB,MAAMyB,EAAOzB,QACnC,QACI,OAAO,eAAIwB,OKEZe,EAAQC,YAAYlB,EAAamB,YAAgBC,MAY/CC,EAA0DC,IAKvEtE,OAAOiE,MAAQA,E,sECtBFM,GAAcC,IAAMC,MAAK,YAAwD,IAAtDC,EAAqD,EAArDA,SAAqD,IAA5CC,gBAA4C,WAEjDC,mBAAS,IAFwC,mBAElFC,EAFkF,KAEpEC,EAFoE,OAG/DF,mBAAwB,MAHuC,mBAGlFlD,EAHkF,KAG3EqD,EAH2E,KA6BzF,OACI,gCACI,cAACC,EAAA,EAAD,CAAWC,QAAS,WACTN,SAAUA,EACVO,MAAOL,EACPM,KAAM,QACNC,MAAO,YACPC,SArBU,SAACC,GAC1BR,EAAgBQ,EAAEC,cAAcL,OAChCH,EAAS,OAoBMS,WAlBO,SAACF,GACT,OAAV5D,GACAqD,EAAS,MACC,UAAVO,EAAEG,KAAmBZ,EAAaa,QAClChB,EAASG,GACTC,EAAgB,KAEhBC,EAAS,sBAYErD,QAASA,EACTiE,WAAYjE,GAAS,qBACrBkE,MAAO,QACPC,GAAI,CACAC,MAAO,CACHC,OAAQ,WAK3B,cAACC,EAAA,EAAD,CAAYC,QA3CJ,WACRpB,EAAaa,QACbhB,EAASG,GACTC,EAAgB,KAEhBC,EAAS,sBAsCqBK,MAAO,YAAaT,SAAUA,EAA5D,SACI,cAACuB,EAAA,EAAD,CAAQd,MAAO,oB,UCjDlBe,GAAe3B,IAAMC,MAAK,SAAC2B,GAAkC,IAAD,EACrCxB,oBAAS,GAD4B,mBAC9DyB,EAD8D,KACpDC,EADoD,OAE3C1B,mBAAS,IAFkC,mBAE9D1D,EAF8D,KAEvDqF,EAFuD,KAI/DC,EAAa,WACfF,GAAY,GACRF,EAAMlF,OACNqF,EAASH,EAAMlF,QAGjBuF,EAAc,WAChBH,GAAY,GACZF,EAAM1B,SAASxD,IAYnB,OACImF,EACM,cAACrB,EAAA,EAAD,CAAWC,QAAS,WACTY,GAAI,CAACa,MAAO,SACZxB,MAAOhE,EACPkE,MAAO,YACPuB,OAAQF,EACRG,WAAS,EACTvB,SAlBQ,SAACC,GAC1BiB,EAASjB,EAAEC,cAAcL,QAkBRM,WAhBK,SAACF,GACT,UAAVA,EAAEG,KACFgB,OAeE,uBAAMI,cAAeL,EAArB,UAAkCJ,EAAMlF,MACtC,cAAC8E,EAAA,EAAD,CAAYC,QAASO,EAArB,SACI,cAACM,GAAA,EAAD,CAAiBC,SAAU,kB,sEC9BlCC,GAA0BxC,IAAMC,MAAK,YAKQ,IAJHnB,EAIE,EAJFA,KACA2D,EAGE,EAHFA,gBACAC,EAEE,EAFFA,iBACAC,EACE,EADFA,WAO7CC,GAN+C,EADSvG,WAO/BwG,uBAAY,SAACnG,GACxC+F,EAAgB3D,EAAKR,GAAI5B,KAC1B,CAAC+F,EAAiB3D,EAAKR,MAE1B,OAAO,8BACH,eAACwE,GAAA,EAAD,CACIC,gBAAc,EACdC,SAAO,EACP3B,GAAI,CAAC4B,WAAY,UAAWC,QAAS,OAAQC,eAAgB,iBAE7DC,UAAWtE,EAAK7B,SAAWrB,EAAayH,UAAY,SAAW,GALnE,UAMI,cAACC,GAAA,EAAD,CAAUC,QAASzE,EAAK7B,SAAWrB,EAAayH,UAAWzC,MAAO,YACxDC,SAhBc,SAACC,GAC7B,IAAIJ,EAAQI,EAAEC,cAAcwC,QAC5Bb,EAAiB5D,EAAKR,GAAIoC,EAAQ9E,EAAayH,UAAYzH,EAAa4H,QAepE,cAAC7B,GAAD,CAAcjF,MAAOoC,EAAKpC,MAAOwD,SAAU0C,IAC3C,cAACpB,EAAA,EAAD,CAAYC,QAAS,kBAAMkB,EAAW7D,EAAKR,KAAKsC,MAAO,YAAvD,SACI,cAAC,KAAD,QANC9B,EAAKR,SCPTmF,GAAWzD,IAAMC,MAAK,YAA2C,IAAzCjB,EAAwC,EAAxCA,SAAUd,EAA8B,EAA9BA,MACpCI,EAAoCU,EAApCV,GAAIM,EAAgCI,EAAhCJ,OAAQW,EAAwBP,EAAxBO,aAAc7C,EAAUsC,EAAVtC,MAC3Ba,EAAWmG,cAEjBC,qBAAU,WPgDU,IAACxF,EO/CjBZ,GP+CiBY,EO/CCa,EAASV,GP+CX,uCAAsC,WAAMf,GAAN,eAAAqG,EAAA,sEAElDrG,EAASF,EAAa,YAF4B,SAGjCjB,EAAkB+B,GAHe,OAI/B,QADf1B,EAH8C,QAIzCS,QACLK,EAASU,EAAUxB,EAAKoH,MAAO1F,IAC/BZ,EAASF,EAAa,eANwB,gDASlDK,EAAyB,EAAD,GAAGH,GATuB,yDAAtC,0DO9CjB,IAEH,IAAMoF,EAAaE,uBAAY,SAACjG,GAC5BW,EPuDkB,SAACX,EAAgBP,GAAjB,8CAAsD,WAAMkB,GAAN,iBAAAqG,EAAA,sEAEpErG,EAASF,EAAa,YAF8C,SAGjDjB,EAAoBC,EAAYO,GAHiB,gBAI5C,KADnBH,EAH+D,EAG/DA,MACIqH,YACLvG,EAASM,EAAajB,EAAQP,IAC9BkB,EAASF,EAAa,eAEtBC,EAAqBb,EAAKc,GARsC,gDAWpEG,EAAyB,EAAD,GAAGH,GAXyC,yDAAtD,sDOvDTwG,CAAWnH,EAAQ0B,MAC7B,CAACf,EAAUe,IAER0F,EAAUnB,uBAAY,SAACxC,GACzB9C,EPiEyB,SAACb,EAAeL,GAAhB,8CAAqD,WAAMkB,GAAN,iBAAAqG,EAAA,sEAE1ErG,EAASF,EAAa,YAFoD,SAGvDjB,EAAoBC,EAAYK,GAHuB,gBAIlD,KADnBD,EAHqE,EAGrEA,MACIqH,YACLvG,EAvDsC,CAACH,KAAM,iBAAkBU,QAAS,CAACgB,KAuDtDrC,EAAKA,KAAKwH,QAC7B1G,EAASF,EAAa,eAEtBC,EAAqBb,EAAKc,GAR4C,gDAW1EG,EAAyB,EAAD,GAAGH,GAX+C,yDAArD,sDOjEhB2G,CAAkB7D,EAAc/B,MAC1C,CAACf,EAAUe,IAERoE,EAAmBG,uBAAY,SAACjG,EAAgBK,GAClDM,EP2E+B,SAAClB,EAAoBO,EAAgBK,GAArC,8CACnC,WAAOM,EAAS4G,GAAhB,uBAAAP,EAAA,yDACUlF,EAAQyF,IACRrF,EAAOJ,EAAMR,MAAM7B,GAAY+H,MAAK,SAAAvF,GAAC,OAAIA,EAAEP,KAAO1B,KAF5D,uBAIQyH,QAAQC,KAAK,+BAJrB,iCAOUxH,EAA6B,CAC/BG,SACAP,MAAOoC,EAAKpC,MACZ6H,SAAUzF,EAAKyF,SACfC,YAAa1F,EAAK0F,YAClBC,SAAU3F,EAAK2F,SACfC,UAAW5F,EAAK4F,WAbxB,SAgBQnH,EAASF,EAAa,YAhB9B,UAiB0BjB,EAA0BC,EAAYO,EAAQE,GAjBxE,iBAkBgC,KADpBL,EAjBZ,EAiBYA,MACKqH,YACLvG,EAASQ,EAAmBd,EAAQL,EAAQP,IAC5CkB,EAASF,EAAa,eAEtBC,EAAqBb,EAAKc,GAtBtC,kDAyBQG,EAAyB,EAAD,GAAGH,GAzBnC,0DADmC,wDO3EtBoH,CAAwBrG,EAAI1B,EAAQK,MAC9C,CAACM,EAAUe,IAERsG,EAAsB/B,uBAAY,SAACnG,GACrCa,ELY8B,SAAClB,EAAoBK,GAArB,8CAAqD,WAAMa,GAAN,SAAAqG,EAAA,sEAE/ErG,EAASF,EAAa,YAFyD,SAG5De,EAAwB/B,EAAYK,GAHwB,OAIvD,IAJuD,OAG1ED,KACIqH,aACLvG,EAASgB,EAAsBlC,EAAYK,IAC3Ca,EAASF,EAAa,eANqD,gDAS/EK,EAAyB,EAAD,GAAGH,GAToD,yDAArD,sDKZrBsH,CAAuBvG,EAAI5B,MACrC,CAACa,EAAUe,IAERwG,EAAiBjC,uBAAY,WLJF,IAACxG,EKK9BkB,GLL8BlB,EKKCiC,ELLF,uCAAsC,WAAMf,GAAN,SAAAqG,EAAA,sEAE/DrG,EAASF,EAAa,YACtBE,EAjBqE,CAC7EH,KAAM,sCAAuCU,QAAS,CAACb,OAgBE,UAhBMqB,GAgBjBjC,KAHyB,SAI5C+B,EAAmB/B,GAJyB,OAKvC,IALuC,OAI1DI,KACIqH,aACLvG,EAASc,EAAiBhC,IAC1BkB,EAASF,EAAa,eAPqC,kDAU/DK,EAAyB,EAAD,GAAGH,GAVoC,0DAAtC,0DKM9B,CAACA,EAAUe,IAERyG,EAAqBlC,uBAAY,SAACjE,GACpCrB,ELzB8B,SAACe,EAAYM,GAAb,MAA2C,CAC7ExB,KAAM,+BAAgCU,QAAS,CAACc,SAAQN,OKwB3C0G,CAAuB1G,EAAIM,MACrC,CAACrB,EAAUe,IAERmE,EAAkBI,uBAAY,SAACjG,EAAgBF,GACjDa,EPwF8B,SAAClB,EAAoBO,EAAgBF,GAArC,8CAClC,WAAOa,EAAU4G,GAAjB,uBAAAP,EAAA,yDACUlF,EAAQyF,IACRrF,EAAOJ,EAAMR,MAAM7B,GAAY+H,MAAK,SAAAvF,GAAC,OAAIA,EAAEP,KAAO1B,KAF5D,uBAIQyH,QAAQC,KAAK,+BAJrB,iCAOUxH,EAA6B,CAC/BG,OAAQ6B,EAAK7B,OACbP,MAAOA,EACP6H,SAAUzF,EAAKyF,SACfC,YAAa1F,EAAK0F,YAClBC,SAAU3F,EAAK2F,SACfC,UAAW5F,EAAK4F,WAbxB,SAgBQnH,EAASF,EAAa,YAhB9B,UAiB2BjB,EAAyBC,EAAYO,EAAQE,GAjBxE,iBAkBgC,KADnBL,EAjBb,EAiBaA,MACIqH,YACLvG,EAASS,EAAkBtB,EAAOE,EAAQP,IAC1CkB,EAASF,EAAa,eAEtBC,EAAqBb,EAAKc,GAtBtC,kDAyBQG,EAAyB,EAAD,GAAGH,GAzBnC,0DADkC,wDOxFrB0H,CAAuB3G,EAAI1B,EAAQF,MAC7C,CAACa,EAAUe,IAGV4G,EAAkBhH,EAEP,WAAXU,IACAsG,EAAkBhH,EAAMU,QAAO,SAAAC,GAAC,OAAIA,EAAE5B,SAAWrB,EAAa4H,QAEnD,cAAX5E,IACAsG,EAAkBhH,EAAMU,QAAO,SAAAC,GAAC,OAAIA,EAAE5B,SAAWrB,EAAayH,cAGlE,IAAM8B,EAAgBD,EAAgBnG,KAAI,SAAAF,GACtC,OAAO,cAAC2D,GAAD,CAAME,iBAAkBA,EAClBrG,WAAYiC,EACZQ,KAAMD,EACN4D,gBAAiBA,EACjBE,WAAYA,GACP9D,EAAEP,OAGxB,OACI,gCACI,eAAC8G,GAAA,EAAD,CAAY3E,QAAQ,KAAK4E,MAAO,SAAhC,UACI,cAAC1D,GAAD,CAAcjF,MAAOA,EAAOwD,SAAU0E,IACtC,cAACpD,EAAA,EAAD,CAAYZ,MAAO,YAAaa,QAASqD,EAAgB3E,SAA2B,YAAjBZ,EAAnE,SACI,cAAC,KAAD,SAGR,cAACQ,GAAD,CAAaG,SAAU8D,EAAS7D,SAA2B,YAAjBZ,IAC1C,cAAC+F,GAAA,EAAD,UACKH,IAEL,gCACI,cAACI,GAAA,EAAD,CAAQ9E,QAAoB,QAAX7B,EAAmB,YAAc,OAAQgC,MAAO,YACzDa,QAAS,kBAAMsD,EAAmB,QAD1C,iBAEA,cAACQ,GAAA,EAAD,CAAQ9E,QAAoB,WAAX7B,EAAsB,YAAc,OAAQgC,MAAO,YAC5Da,QAAS,kBAAMsD,EAAmB,WAD1C,qBAEA,cAACQ,GAAA,EAAD,CAAQ9E,QAAoB,cAAX7B,EAAyB,YAAc,OAAQgC,MAAO,YAC/Da,QAAS,kBAAMsD,EAAmB,cAD1C,iCC3FHS,GAAY,WAErB,IAAMlG,EAAYO,GAAmC,SAAAnB,GAAK,OAAIA,EAAMY,aAC9DpB,EAAQ2B,GAAgC,SAAAnB,GAAK,OAAIA,EAAMR,SAEvDX,EAAWmG,cAEjBC,qBAAU,WACNpG,ENqBoB,uCAAoB,WAAMA,GAAN,iBAAAqG,EAAA,sEAEpCrG,EAASF,EAAa,YAFc,SAGjBe,IAHiB,gBAG/B3B,EAH+B,EAG/BA,KACLc,EAd+C,CAACH,KAAM,kBAAmB+B,MAcjD1C,IACxBc,EAASF,EAAa,cALc,kDAOpCK,EAAyB,EAAD,GAAGH,GAPS,0DAApB,yDMpBrB,IAGH,IAAMkI,EAAqBnG,EAAUP,KAAI,SAAAM,GACrC,IAAIqG,EAAiBxH,EAAMmB,EAAGf,IAC9B,OACI,cAACqH,EAAA,EAAD,CAAM1B,MAAI,EAAV,SACI,cAAC2B,EAAA,EAAD,CAAOC,UAAW,EAAGxE,GAAI,CAACyE,QAAS,QAAnC,SACI,cAACrC,GAAD,CACIzE,SAAUK,EAEVnB,MAAOwH,GADFrG,EAAGf,OAJJe,EAAGf,OAY3B,OAAO,mCACFmH,K,gFC/BHM,GAAQ/F,cAA6C,SACvD4B,EACAoE,GAEA,OAAO,cAAC,KAAD,aAAUH,UAAW,EAAGG,IAAKA,EAAKvF,QAAQ,UAAamB,OAG3D,SAASqE,KACZ,IAAM/I,EAAQ2C,GAAgC,SAAAnB,GAAK,OAAIA,EAAMc,IAAItC,SAC3DK,EAAWmG,cAGXwC,EAAc,SAACC,EAAsCC,GACxC,cAAXA,GAGJ7I,EAASJ,EAAY,QAGnBkJ,EAAmB,OAAVnJ,EAEf,OACI,cAACoJ,GAAA,EAAD,CAAUC,KAAMF,EAAQG,iBAAkB,IAAMC,QAASP,EAAzD,SACI,cAAC,GAAD,CAAOO,QAASP,EAAaQ,SAAS,QAAQrF,GAAI,CAACa,MAAO,QAA1D,SACKhF,MClBV,IAAMyJ,GAAM,WACf,IAAM1J,EAAS4C,GAA6B,SAAAnB,GAAK,OAAIA,EAAMc,IAAIvC,UACzDM,EAAWmG,cAEXkD,EAAc/D,uBAAY,SAACnG,GAC7Ba,ERwDsB,SAACb,GAAD,8CAAiC,WAAMa,GAAN,eAAAqG,EAAA,sEAEnDrG,EAASF,EAAa,YAF6B,SAGlCe,EAAmB1B,GAHe,OAI3B,KADpBD,EAH+C,QAI1CqH,YACLvG,EAjDsC,CAACH,KAAM,qBAAsBU,QAAS,CAACkB,SAiDtDvC,EAAKA,KAAKwH,QACjC1G,EAASF,EAAa,eAEtBC,EAAqBb,EAAMc,GARoB,gDAWnDG,EAAyB,EAAD,GAAGH,GAXwB,yDAAjC,sDQxDbsJ,CAAenK,MACzB,CAACa,IAEJ,OACI,gCACI,eAACuJ,GAAA,EAAD,CAAQC,SAAS,SAASnG,MAAO,YAAjC,UACI,cAACqF,GAAD,IACA,eAACe,GAAA,EAAD,WACI,cAACxF,EAAA,EAAD,CAAYb,KAAK,QAAQsG,KAAK,QAAQrG,MAAM,UAAUsG,aAAW,OAAO7F,GAAI,CAAC8F,GAAI,GAAjF,SACI,cAAC,KAAD,MAEJ,cAAC/B,GAAA,EAAD,CAAY3E,QAAQ,KAAK2G,UAAU,MAAM/F,GAAI,CAACgG,SAAU,GAAxD,uBAGA,cAAC9B,GAAA,EAAD,CAAQ3E,MAAM,UAAd,sBAEQ,YAAX3D,GAAwB,cAACqK,GAAA,EAAD,CAAgB1G,MAAM,eAEnD,eAAC2G,GAAA,EAAD,CAAWC,OAAK,EAAhB,UACI,cAAC7B,EAAA,EAAD,CAAM8B,WAAS,EAACpG,GAAI,CAACyE,QAAS,SAAU4B,aAAc,QAAtD,SACI,cAAC3H,GAAD,CAAaG,SAAU0G,MAE3B,cAACjB,EAAA,EAAD,CAAM8B,WAAS,EAACE,QAAS,EAAzB,SACI,cAAC,GAAD,aChCpBC,IAASC,OACL,eAAC,IAAD,CAAUpI,MAAOA,EAAjB,UACI,cAAC,GAAD,IADJ,OAGAqI,SAASC,eAAe,Sf8HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3L,MAAK,SAAA4L,GACJA,EAAaC,gBAEdC,OAAM,SAAAnL,GACLmH,QAAQnH,MAAMA,EAAMS,c","file":"static/js/main.1614ed75.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1',\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"4c618d05-4087-4c56-9fa2-e412fa4c037d\"\r\n    }\r\n})\r\n\r\n//api\r\nexport const tasksAPI = {\r\n    getTasks(todolistId: string) {\r\n        return instance.get<ResponseTasksType>(`/todo-lists/${todolistId}/tasks`).then(res => res.data)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<CommonResponseType<{ item: ResponseTaskType }>>(`/todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<CommonResponseType>(`/todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTaskStatus(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<CommonResponseType>(`/todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n    updateTaskTitle(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<CommonResponseType>(`/todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n}\r\n\r\n//types\r\nexport type CommonResponseType<T = {}> = {\r\n    resultCode: number\r\n    messages: string []\r\n    fieldsErrors: string []\r\n    data: T\r\n}\r\nexport type ResponseTasksType = {\r\n    totalCount: number\r\n    error: string\r\n    items: ResponseTaskType []\r\n}\r\nexport type ResponseTaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type  UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\n","const initState: InitStateType = {\r\n    status: 'idle',\r\n    error: null\r\n}\r\n\r\n\r\nexport const appReducer = (state: InitStateType = initState, action: AppActionsType):InitStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status:action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error:action.error}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setAppError = (error: string | null) => ({type:'APP/SET-ERROR',error}as const)\r\nexport const setAppStatus = (status: StatusType) => ({type:'APP/SET-STATUS',status}as const)\r\n\r\n//types\r\nexport type InitStateType = {\r\n    status: StatusType\r\n    error: string | null\r\n}\r\nexport type StatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type SetErrorActionType =  ReturnType<typeof setAppError>\r\nexport type SetStatusActionType =  ReturnType<typeof setAppStatus>\r\nexport type AppActionsType =  SetErrorActionType | SetStatusActionType\r\n\r\n","import {setAppError, SetErrorActionType, setAppStatus, SetStatusActionType} from \"../app/app-reducer\";\r\nimport {CommonResponseType} from \"../api/tasksApi\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nexport const handleServerAppError = <D>(data:CommonResponseType<D>, dispatch:Dispatch<SetErrorActionType | SetStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppError(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppError(\"Something wrong! Try later\"))\r\n    }\r\n    dispatch(setAppStatus('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch:Dispatch<SetErrorActionType | SetStatusActionType>) => {\r\n    dispatch(setAppError(error.message ? error.message : \"Some error occurred\"))\r\n    dispatch(setAppStatus('failed'))\r\n}","import {ResponseTaskType, tasksAPI, TaskStatuses, UpdateTaskModelType} from \"../../api/tasksApi\";\r\nimport {AddTodoListACType, RemoveTodoListACType, SetTodoListsACType} from \"./todo-reducer\";\r\nimport {RootReducerType, RootThunkType} from \"../../app/Redux-store\";\r\nimport {SetErrorActionType, setAppStatus} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../helpers/error-helpers\";\r\n\r\n\r\nexport let initialState: TaskStateType = {}\r\n\r\nexport const taskReducer = (state = initialState, action: TaskActionsType): TaskStateType => {\r\n    switch (action.type) {\r\n        case 'TASKS/REMOVE-TASK':\r\n            return {\r\n                ...state, [action.payload.todolistId]: state[action.payload.todolistId].filter(t =>\r\n                    t.id !== action.payload.taskId)\r\n            }\r\n        case 'TASKS/ADD-TASK':\r\n            return {\r\n                ...state,\r\n                [action.payload.task.todoListId]: [action.payload.task, ...state[action.payload.task.todoListId]]\r\n            }\r\n        case 'TASKS/CHANGE-TASK-STATUS':\r\n            return {\r\n                ...state, [action.payload.todolistId]: state[action.payload.todolistId].map(t =>\r\n                    t.id === action.payload.taskId ? {...t, status: action.payload.status} : t)\r\n            }\r\n        case 'TASKS/CHANGE-TASK-TITLE':\r\n            return {\r\n                ...state, [action.payload.todolistId]: state[action.payload.todolistId].map(t =>\r\n                    t.id === action.payload.taskId ? {...t, title: action.payload.title} : t)\r\n            }\r\n        case \"TASKS/SET_TASKS\":\r\n            return {...state, [action.payload.todoListId]: action.payload.tasks}\r\n        case \"TODOS/ADD-TODOLIST\":\r\n            return {...state, [action.payload.todolist.id]: []}\r\n        case \"TODOS/REMOVE-TODOLIST\":\r\n            const copyState = {...state}\r\n            delete copyState[action.payload.id]\r\n            return copyState\r\n        case 'TODOS/SET-TODOS': {\r\n            const stateCopy = {...state}\r\n            action.todos.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy;\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n// Action Creators\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({\r\n    type: 'TASKS/REMOVE-TASK',\r\n    payload: {taskId, todolistId}\r\n} as const)\r\nexport const addTaskAC = (task: ResponseTaskType) => ({type: 'TASKS/ADD-TASK', payload: {task}} as const)\r\nexport const changeTaskStatusAC = (status: TaskStatuses, taskId: string, todolistId: string) =>\r\n    ({\r\n        type: 'TASKS/CHANGE-TASK-STATUS',\r\n        payload: {\r\n            status,\r\n            taskId,\r\n            todolistId\r\n        }\r\n    } as const)\r\nexport const changeTaskTitleAC = (title: string, taskId: string, todolistId: string) =>\r\n    ({\r\n        type: 'TASKS/CHANGE-TASK-TITLE',\r\n        payload: {\r\n            title,\r\n            taskId,\r\n            todolistId\r\n        }\r\n    } as const)\r\nexport const setTaskAC = (tasks: Array<ResponseTaskType>, todoListId: string) =>\r\n    ({type: 'TASKS/SET_TASKS', payload: {tasks, todoListId}} as const)\r\n\r\n\r\n//Thunk Creators\r\nexport const getTasks = (todoListId: string):RootThunkType => async dispatch => {\r\n        try {\r\n            dispatch(setAppStatus('loading'))\r\n            let data = await tasksAPI.getTasks(todoListId)\r\n            if (data.error === null) {\r\n                dispatch(setTaskAC(data.items, todoListId))\r\n                dispatch(setAppStatus('succeeded'))\r\n            }\r\n        } catch (e: any) {\r\n            handleServerNetworkError(e,dispatch)\r\n        }\r\n}\r\nexport const deleteTask = (taskId: string, todolistId: string):RootThunkType => async dispatch => {\r\n        try {\r\n            dispatch(setAppStatus('loading'))\r\n            let {data} = await tasksAPI.deleteTask(todolistId, taskId)\r\n            if (data.resultCode === 0) {\r\n                dispatch(removeTaskAC(taskId, todolistId))\r\n                dispatch(setAppStatus('succeeded'))\r\n            } else {\r\n                handleServerAppError(data,dispatch)\r\n            }\r\n        } catch (e: any) {\r\n            handleServerNetworkError(e,dispatch)\r\n        }\r\n}\r\nexport const createFetchedTask = (title: string, todolistId: string):RootThunkType => async dispatch => {\r\n        try {\r\n            dispatch(setAppStatus('loading'))\r\n            let {data} = await tasksAPI.createTask(todolistId, title)\r\n            if (data.resultCode === 0) {\r\n                dispatch(addTaskAC(data.data.item))\r\n                dispatch(setAppStatus('succeeded'))\r\n            } else {\r\n                handleServerAppError(data,dispatch)\r\n            }\r\n        } catch (e: any) {\r\n            handleServerNetworkError(e,dispatch)\r\n        }\r\n}\r\nexport const updateFetchedTaskStatus = (todolistId: string, taskId: string, status: TaskStatuses):RootThunkType =>\r\n    async (dispatch,getState: () => RootReducerType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            console.warn(\"task not found in the state\")\r\n            return\r\n        }\r\n        const model: UpdateTaskModelType = {\r\n            status,\r\n            title: task.title,\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n        }\r\n        try {\r\n            dispatch(setAppStatus('loading'))\r\n           let {data} = await tasksAPI.updateTaskStatus(todolistId, taskId, model)\r\n            if (data.resultCode === 0) {\r\n                dispatch(changeTaskStatusAC(status, taskId, todolistId))\r\n                dispatch(setAppStatus('succeeded'))\r\n            } else {\r\n                handleServerAppError(data,dispatch)\r\n            }\r\n        } catch (e: any) {\r\n            handleServerNetworkError(e,dispatch)\r\n        }\r\n}\r\nexport const updateFetchedTaskTitle = (todolistId: string, taskId: string, title: string):RootThunkType =>\r\n    async (dispatch, getState: () => RootReducerType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            console.warn(\"task not found in the state\")\r\n            return\r\n        }\r\n        const model: UpdateTaskModelType = {\r\n            status: task.status,\r\n            title: title,\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n        }\r\n        try {\r\n            dispatch(setAppStatus('loading'))\r\n            let {data} = await tasksAPI.updateTaskTitle(todolistId, taskId, model)\r\n            if (data.resultCode === 0) {\r\n                dispatch(changeTaskTitleAC(title, taskId, todolistId))\r\n                dispatch(setAppStatus('succeeded'))\r\n            } else {\r\n                handleServerAppError(data,dispatch)\r\n            }\r\n        } catch (e: any) {\r\n            handleServerNetworkError(e,dispatch)\r\n        }\r\n}\r\n\r\n// types\r\nexport type TaskActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof changeTaskStatusAC>\r\n    | ReturnType<typeof changeTaskTitleAC>\r\n    | ReturnType<typeof setTaskAC>\r\n    | SetTodoListsACType\r\n    | AddTodoListACType\r\n    | RemoveTodoListACType\r\n    | SetErrorActionType\r\n\r\nexport type TaskStateType = {\r\n    [key: string]: Array<ResponseTaskType>\r\n}\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1',\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"4c618d05-4087-4c56-9fa2-e412fa4c037d\"\r\n    }\r\n})\r\n\r\n//api\r\nexport const toDoAPI = {\r\n    getTodos() {\r\n        return instance.get<Array<TodoType>>('/todo-lists')\r\n    },\r\n    createTodo(title: string) {\r\n        return instance.post<CommonResponseType<{ item: TodoType }>>(`/todo-lists`, {title})\r\n            .then(res => res.data)\r\n    },\r\n    deleteTodo(todolistId: string) {\r\n        return instance.delete<CommonResponseType>(`/todo-lists/${todolistId}`)\r\n    },\r\n    updateTodoTitle(todolistId: string, title: string) {\r\n        return instance.put<CommonResponseType>(`/todo-lists/${todolistId}`, {title})\r\n    }\r\n}\r\n\r\n//types\r\nexport type TodoType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\ntype CommonResponseType<T = {}> = {\r\n    resultCode: number\r\n    messages: string []\r\n    fieldsErrors: string []\r\n    data: T\r\n}\r\n\r\n","import {toDoAPI, TodoType} from \"../../api/todoApi\";\r\nimport {RootThunkType} from \"../../app/Redux-store\";\r\nimport {setAppStatus, StatusType} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../helpers/error-helpers\";\r\n\r\n\r\nlet initialState: Array<TodoDomainType> = []\r\n\r\nexport const toDoReducer = (state = initialState, action: TodoActionsType): Array<TodoDomainType> => {\r\n    switch (action.type) {\r\n        case \"TODOS/REMOVE-TODOLIST\":\r\n            return state.filter(tl => tl.id !== action.payload.id)\r\n        case \"TODOS/ADD-TODOLIST\":\r\n            return [{...action.payload.todolist, filter:'all',entityStatus:'idle'},...state]\r\n        case \"TODOS/CHANGE-TODOLIST_ENTITY_STATUS\":\r\n            return state.map(tl => tl.id === action.payload.id ? {...tl, entityStatus: action.payload.status} : tl)\r\n        case \"TODOS/CHANGE-TODOLIST_TITLE\":\r\n            return state.map(tl => tl.id === action.payload.id ? {...tl, title: action.payload.title} : tl)\r\n        case \"TODOS/CHANGE-TODOLIST_FILTER\":\r\n            return state.map(tl => tl.id === action.payload.id ? {...tl, filter: action.payload.filter} : tl)\r\n        case \"TODOS/SET-TODOS\":\r\n            return action.todos.map(tl => ({...tl, filter: 'all', entityStatus:'idle'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// Action Creators\r\nexport const removeTodoListAC = (id: string) => ({type: \"TODOS/REMOVE-TODOLIST\", payload: {id}} as const)\r\nexport const setTodoListsAC = (todos: Array<TodoType>) => ({type: \"TODOS/SET-TODOS\", todos} as const)\r\nexport const addTodoListAC = (todolist: TodoType) => ({type: \"TODOS/ADD-TODOLIST\", payload: {todolist}} as const)\r\nexport const changeTodoListTitleAC = (id: string, title: string) => ({\r\n    type: \"TODOS/CHANGE-TODOLIST_TITLE\", payload: {title, id}} as const)\r\nexport const changeTodoListFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: \"TODOS/CHANGE-TODOLIST_FILTER\", payload: {filter, id}} as const)\r\nexport const changeTodoListEntityStatusAC = (id: string, status: StatusType) => ({\r\n    type: \"TODOS/CHANGE-TODOLIST_ENTITY_STATUS\", payload: {status, id}} as const)\r\n\r\n//Thunk Creators\r\nexport const getTodoLists = ():RootThunkType => async dispatch => {\r\n        try {\r\n            dispatch(setAppStatus('loading'))\r\n            let {data} = await toDoAPI.getTodos()\r\n            dispatch(setTodoListsAC(data))\r\n            dispatch(setAppStatus('succeeded'))\r\n        } catch (e: any) {\r\n            handleServerNetworkError(e,dispatch)\r\n        }\r\n}\r\nexport const deleteFetchedTodolist = (todolistId: string):RootThunkType => async dispatch => {\r\n        try {\r\n            dispatch(setAppStatus('loading'))\r\n            dispatch(changeTodoListEntityStatusAC(todolistId,'loading'))\r\n            let {data} = await toDoAPI.deleteTodo(todolistId)\r\n            if (data.resultCode === 0) {\r\n                dispatch(removeTodoListAC(todolistId))\r\n                dispatch(setAppStatus('succeeded'))\r\n            }\r\n        } catch (e: any) {\r\n            handleServerNetworkError(e,dispatch)\r\n        }\r\n}\r\nexport const updateFetchedTodoTitle = (todolistId: string, title: string):RootThunkType => async dispatch => {\r\n        try {\r\n            dispatch(setAppStatus('loading'))\r\n            let {data} = await toDoAPI.updateTodoTitle(todolistId, title)\r\n            if (data.resultCode === 0) {\r\n                dispatch(changeTodoListTitleAC(todolistId, title))\r\n                dispatch(setAppStatus('succeeded'))\r\n            }\r\n        } catch (e: any) {\r\n            handleServerNetworkError(e,dispatch)\r\n        }\r\n}\r\nexport const createTodolist = (title: string):RootThunkType => async dispatch => {\r\n        try {\r\n            dispatch(setAppStatus('loading'))\r\n            let data = await toDoAPI.createTodo(title)\r\n            if (data.resultCode === 0) {\r\n                dispatch(addTodoListAC(data.data.item))\r\n                dispatch(setAppStatus('succeeded'))\r\n            } else {\r\n                handleServerAppError(data, dispatch)\r\n            }\r\n        } catch (e: any) {\r\n            handleServerNetworkError(e,dispatch)\r\n        }\r\n}\r\n\r\n// types\r\nexport type SetTodoListsACType = ReturnType<typeof setTodoListsAC>\r\nexport type AddTodoListACType = ReturnType<typeof addTodoListAC>\r\nexport type RemoveTodoListACType = ReturnType<typeof removeTodoListAC>\r\n\r\nexport type TodoActionsType =\r\n    | RemoveTodoListACType\r\n    | AddTodoListACType\r\n    | ReturnType<typeof changeTodoListTitleAC>\r\n    | ReturnType<typeof changeTodoListFilterAC>\r\n    | ReturnType<typeof changeTodoListEntityStatusAC>\r\n    | SetTodoListsACType\r\n\r\nexport type TodoDomainType = TodoType & {\r\n    filter: FilterValuesType\r\n    entityStatus : StatusType\r\n}\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {TaskActionsType, taskReducer} from \"../features/Todolists/task-reducer\";\r\nimport {TodoActionsType, toDoReducer} from \"../features/Todolists/todo-reducer\";\r\nimport {TypedUseSelectorHook, useSelector} from \"react-redux\";\r\nimport thunk, {ThunkAction} from \"redux-thunk\";\r\nimport {AppActionsType, appReducer} from \"./app-reducer\";\r\n\r\nexport type RootReducerType = ReturnType<typeof rootReducer>\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: taskReducer,\r\n    todoLists: toDoReducer,\r\n    app:appReducer\r\n})\r\n\r\nexport let store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\n\r\nexport type RootAppActions = TodoActionsType | AppActionsType | TaskActionsType\r\n\r\n//ThunkAction<any,any, any, any>\r\n//1. what returned function (void)\r\n//2. rootState type\r\n//3. extra arguments (unknown)\r\n//4. Action Types\r\nexport type RootThunkType<ReturnType = void> = ThunkAction<ReturnType, RootReducerType, unknown, RootAppActions>\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<RootReducerType> = useSelector;\r\n\r\n\r\n\r\n//@ts-ignore\r\nwindow.store = store","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@mui/material\";\r\nimport {AddBox} from \"@mui/icons-material\";\r\n\r\n\r\ntype AddItemFormPropsType = {\r\n    callBack: (value: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(({callBack,disabled = false}: AddItemFormPropsType) => {\r\n\r\n    const [newTaskTitle, setNewTaskTitle] = useState(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (newTaskTitle.trim()) {\r\n            callBack(newTaskTitle)\r\n            setNewTaskTitle(\"\")\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n\r\n\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTaskTitle(e.currentTarget.value)\r\n        setError(null)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null)\r\n            setError(null)\r\n        if (e.key === \"Enter\" && newTaskTitle.trim()) {\r\n            callBack(newTaskTitle)\r\n            setNewTaskTitle(\"\")\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <TextField variant={\"outlined\"}\r\n                       disabled={disabled}\r\n                       value={newTaskTitle}\r\n                       size={\"small\"}\r\n                       color={'secondary'}\r\n                       onChange={onChangeTitleHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       error={!!error}\r\n                       helperText={error && \"Title is required!\"}\r\n                       label={'title'}\r\n                       sx={{\r\n                           input: {\r\n                               height: \"20px\"\r\n                           }\r\n                       }}\r\n            />\r\n\r\n            <IconButton onClick={addItem} color={\"secondary\"} disabled={disabled}>\r\n                <AddBox color={\"inherit\"}/>\r\n            </IconButton>\r\n\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@mui/material\";\r\nimport {ModeEditOutline} from \"@mui/icons-material\";\r\n\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    callBack: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [title, setTitle] = useState(\"\")\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n        if (props.title) {\r\n            setTitle(props.title)\r\n        }\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.callBack(title)\r\n    }\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            offEditMode()\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField variant={'standard'}\r\n                         sx={{width: \"130px\"}}\r\n                         value={title}\r\n                         color={\"secondary\"}\r\n                         onBlur={offEditMode}\r\n                         autoFocus\r\n                         onChange={onChangeTitleHandler}\r\n                         onKeyPress={onKeyPressHandler}/>\r\n            : <span onDoubleClick={onEditMode}>{props.title}\r\n                <IconButton onClick={onEditMode}>\r\n                    <ModeEditOutline fontSize={\"small\"}/>\r\n                </IconButton>\r\n        </span>\r\n    )\r\n})","import React, {ChangeEvent, FC, useCallback} from \"react\";\r\nimport {Checkbox, ListItem} from \"@mui/material\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport IconButton from \"@mui/material/IconButton/IconButton\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport {ResponseTaskType, TaskStatuses} from \"../../../../api/tasksApi\";\r\n\r\n\r\ntype TaskPropsType = {\r\n    task: ResponseTaskType\r\n    changeTaskTitle: (taskId: string, title: string) => void\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses) => void\r\n    removeTask: (taskId: string) => void\r\n    todolistId:string\r\n}\r\n\r\nexport const Task: FC<TaskPropsType> = React.memo(({\r\n                                                       task,\r\n                                                       changeTaskTitle,\r\n                                                       changeTaskStatus,\r\n                                                       removeTask,todolistId\r\n                                                   }) => {\r\n\r\n    const changeTaskStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let value = e.currentTarget.checked\r\n        changeTaskStatus(task.id, value ? TaskStatuses.Completed : TaskStatuses.New)\r\n    }\r\n    const changeTaskTitleHandler = useCallback((title: string) => {\r\n        changeTaskTitle(task.id, title)\r\n    }, [changeTaskTitle, task.id])\r\n\r\n    return <div>\r\n        <ListItem\r\n            disableGutters\r\n            divider\r\n            sx={{paddingTop: \"0px,3px\", display: \"flex\", justifyContent: \"space-between\"}}\r\n            key={task.id}\r\n            className={task.status === TaskStatuses.Completed ? \"isDone\" : \"\"}>\r\n            <Checkbox checked={task.status === TaskStatuses.Completed} color={'secondary'}\r\n                      onChange={changeTaskStatusHandler}/>\r\n            <EditableSpan title={task.title} callBack={changeTaskTitleHandler}/>\r\n            <IconButton onClick={() => removeTask(task.id)} color={\"secondary\"}>\r\n                <DeleteIcon/>\r\n            </IconButton>\r\n        </ListItem>\r\n    </div>\r\n})","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport IconButton from \"@mui/material/IconButton/IconButton\";\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport {Button, List, Typography} from \"@mui/material\";\r\nimport {\r\n    changeTodoListFilterAC,\r\n    deleteFetchedTodolist,\r\n    FilterValuesType, TodoDomainType,\r\n    updateFetchedTodoTitle\r\n} from \"../todo-reducer\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {\r\n    createFetchedTask,\r\n    deleteTask,\r\n    getTasks,\r\n    updateFetchedTaskStatus,\r\n    updateFetchedTaskTitle\r\n} from \"../task-reducer\";\r\nimport {ResponseTaskType, TaskStatuses} from \"../../../api/tasksApi\";\r\n\r\n\r\ntype TodoListPropsType = {\r\n    todolist: TodoDomainType\r\n    tasks: Array<ResponseTaskType>\r\n}\r\n\r\nexport const Todolist = React.memo(({todolist, tasks}: TodoListPropsType) => {\r\n    const {id, filter, entityStatus, title,} = todolist\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(getTasks(todolist.id))\r\n    }, [])\r\n\r\n    const removeTask = useCallback((taskId: string) => {\r\n        dispatch(deleteTask(taskId, id))\r\n    }, [dispatch, id])\r\n\r\n    const addTask = useCallback((newTaskTitle: string) => {\r\n        dispatch(createFetchedTask(newTaskTitle, id))\r\n    }, [dispatch, id])\r\n\r\n    const changeTaskStatus = useCallback((taskId: string, status: TaskStatuses) => {\r\n        dispatch(updateFetchedTaskStatus(id, taskId, status))\r\n    }, [dispatch, id])\r\n\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        dispatch(updateFetchedTodoTitle(id, title))\r\n    }, [dispatch, id])\r\n\r\n    const removeTodolist = useCallback(() => {\r\n        dispatch(deleteFetchedTodolist(id))\r\n    }, [dispatch, id])\r\n\r\n    const changeButtonFilter = useCallback((filter: FilterValuesType) => {\r\n        dispatch(changeTodoListFilterAC(id, filter))\r\n    }, [dispatch, id])\r\n\r\n    const changeTaskTitle = useCallback((taskId: string, title: string) => {\r\n        dispatch(updateFetchedTaskTitle(id, taskId, title))\r\n    }, [dispatch, id])\r\n\r\n\r\n    let taskForTodolist = tasks;\r\n\r\n    if (filter === \"active\") {\r\n        taskForTodolist = tasks.filter(t => t.status === TaskStatuses.New);\r\n    }\r\n    if (filter === \"completed\") {\r\n        taskForTodolist = tasks.filter(t => t.status === TaskStatuses.Completed);\r\n    }\r\n\r\n    const tasksElements = taskForTodolist.map(t => {\r\n        return <Task changeTaskStatus={changeTaskStatus}\r\n                     todolistId={id}\r\n                     task={t}\r\n                     changeTaskTitle={changeTaskTitle}\r\n                     removeTask={removeTask}\r\n                     key={t.id}/>\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <Typography variant=\"h6\" align={'center'}>\r\n                <EditableSpan title={title} callBack={changeTodolistTitle}/>\r\n                <IconButton color={\"secondary\"} onClick={removeTodolist} disabled={entityStatus === 'loading'}>\r\n                    <DeleteIcon/>\r\n                </IconButton>\r\n            </Typography>\r\n            <AddItemForm callBack={addTask} disabled={entityStatus === 'loading'}/>\r\n            <List>\r\n                {tasksElements}\r\n            </List>\r\n            <div>\r\n                <Button variant={filter === 'all' ? \"contained\" : \"text\"} color={\"secondary\"}\r\n                        onClick={() => changeButtonFilter('all')}>all</Button>\r\n                <Button variant={filter === 'active' ? \"contained\" : \"text\"} color={\"secondary\"}\r\n                        onClick={() => changeButtonFilter('active')}>active </Button>\r\n                <Button variant={filter === 'completed' ? \"contained\" : \"text\"} color={\"secondary\"}\r\n                        onClick={() => changeButtonFilter('completed')}> completed</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n","import {Grid, Paper} from \"@mui/material\";\r\nimport React, {useEffect} from \"react\";\r\nimport {useTypedSelector} from \"../../app/Redux-store\";\r\nimport {getTodoLists, TodoDomainType} from \"./todo-reducer\";\r\nimport {TaskStateType} from \"./task-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {Todolist} from \"./Todolist/Todolist\";\r\n\r\n\r\n\r\nexport const TodoLists = () => {\r\n\r\n    const todoLists = useTypedSelector<TodoDomainType[]>(state => state.todoLists)\r\n    const tasks = useTypedSelector<TaskStateType>(state => state.tasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(getTodoLists())\r\n    }, [])\r\n\r\n\r\n    const todolistComponents = todoLists.map(tl => {\r\n        let tasksForRender = tasks[tl.id]\r\n        return (\r\n            <Grid item key={tl.id}>\r\n                <Paper elevation={2} sx={{padding: \"10px\"}}>\r\n                    <Todolist\r\n                        todolist={tl}\r\n                        key={tl.id}\r\n                        tasks={tasksForRender}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n    return <>\r\n        {todolistComponents}\r\n    </>\r\n}","import * as React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useTypedSelector} from \"../../app/Redux-store\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setAppError} from \"../../app/app-reducer\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props,\r\n    ref,\r\n) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useTypedSelector<string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppError(null))\r\n    };\r\n\r\n    const isOpen = error !== null\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n} ","import React, {useCallback} from 'react';\r\nimport './App.css'\r\nimport {createTodolist} from \"../features/Todolists/todo-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {TodoLists} from \"../features/Todolists/Todolists\";\r\nimport {AddItemForm} from \"../components/AddItemForm/AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, LinearProgress, Toolbar, Typography} from \"@mui/material\";\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackBar/ErrorSnackbar\";\r\nimport {useTypedSelector} from \"./Redux-store\";\r\nimport {StatusType} from \"./app-reducer\";\r\n\r\n\r\nexport const App = () => {\r\n    const status = useTypedSelector<StatusType>(state => state.app.status)\r\n    const dispatch = useDispatch()\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(createTodolist(title))\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div>\r\n            <AppBar position=\"static\" color={\"secondary\"}>\r\n                <ErrorSnackbar/>\r\n                <Toolbar>\r\n                    <IconButton size=\"large\" edge=\"start\" color=\"inherit\" aria-label=\"menu\" sx={{mr: 2}}>\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\r\n                        TodoLists\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress color=\"inherit\"/> }\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container sx={{padding: \"20px 0\", marginBottom: \"30px\"}}>\r\n                    <AddItemForm callBack={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={4}>\r\n                    <TodoLists/>\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/Redux-store\";\r\nimport {App} from \"./app/App\";\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>,\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}