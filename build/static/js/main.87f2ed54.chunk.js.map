{"version":3,"sources":["serviceWorker.ts","api/tasksApi.ts","api/authApi.ts","Login/auth-reducer.ts","helpers/error-helpers.ts","app/app-reducer.ts","features/Todolists/task-reducer.ts","features/Todolists/todo-reducer.ts","api/todoApi.ts","app/Redux-store.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/Todolists/Todolist/Task/Task.tsx","features/Todolists/Todolist/Todolist.tsx","features/Todolists/Todolists.tsx","components/ErrorSnackBar/ErrorSnackbar.tsx","Login/Login.tsx","app/App.tsx","index.tsx","components/AddItemForm/AddItemForm.module.css"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","tasksAPI","todolistId","get","then","res","data","title","post","taskId","delete","model","put","ResponseStatusCodes","authApi","params","handleServerAppError","dispatch","setAppError","messages","length","setAppStatus","handleServerNetworkError","error","message","initState","isLoggedIn","setIsLoggedIn","value","type","payload","status","theme","isInitialized","initialState","removeTaskAC","changeTaskStatusAC","changeTaskTitleAC","setTaskAC","tasks","todoListId","toDoAPI","removeTodoListAC","id","changeTodoListTitleAC","rootReducer","combineReducers","state","action","filter","t","task","map","todolist","copyState","stateCopy","todos","forEach","tl","todoLists","entityStatus","app","auth","store","createStore","applyMiddleware","thunk","useTypedSelector","useSelector","AddItemForm","React","memo","callBack","disabled","useState","newTaskTitle","setNewTaskTitle","setError","className","s","lightTextField","darkTextField","TextField","variant","size","onChange","e","currentTarget","onKeyPress","key","trim","helperText","label","sx","input","height","border","borderRadius","IconButton","onClick","color","AddBox","EditableSpan","props","editMode","setEditMode","setTitle","onEditMode","offEditMode","width","onBlur","autoFocus","onDoubleClick","ModeEditOutline","fontSize","Task","changeTaskTitle","changeTaskStatus","removeTask","changeTaskTitleHandler","useCallback","ListItem","disableGutters","divider","paddingTop","display","justifyContent","Completed","Checkbox","checked","New","Todolist","useDispatch","useEffect","a","items","resultCode","success","deleteTask","addTask","item","createFetchedTask","getState","find","console","warn","deadline","description","priority","startDate","updateFetchedTaskStatus","changeTodolistTitle","updateFetchedTodoTitle","removeTodolist","changeButtonFilter","changeTodoListFilterAC","updateFetchedTaskTitle","taskForTodolist","tasksElements","Typography","align","List","Button","TodoLists","addTodolist","createTodolist","todolistComponents","tasksForRender","Grid","Paper","elevation","padding","backgroundColor","container","marginBottom","spacing","to","Alert","ref","ErrorSnackbar","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","errors","FormControlLabel","control","App","logoutHandler","AppBar","position","Toolbar","edge","aria-label","mr","component","flexGrow","Switch","setAppTheme","LinearProgress","Container","fixed","path","element","style","top","textAlign","CircularProgress","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","module","exports"],"mappings":"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","file":"static/js/main.87f2ed54.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1',\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"4c618d05-4087-4c56-9fa2-e412fa4c037d\"\r\n    }\r\n})\r\n\r\n//api\r\nexport const tasksAPI = {\r\n    getTasks(todolistId: string) {\r\n        return instance.get<ResponseTasksType>(`/todo-lists/${todolistId}/tasks`).then(res => res.data)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<CommonResponseType<{ item: ResponseTaskType }>>(`/todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<CommonResponseType>(`/todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTaskStatus(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<CommonResponseType>(`/todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n    updateTaskTitle(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<CommonResponseType>(`/todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n}\r\n\r\n//types\r\nexport type CommonResponseType<T = {}> = {\r\n    resultCode: number\r\n    messages: string []\r\n    fieldsErrors: string []\r\n    data: T\r\n}\r\nexport type ResponseTasksType = {\r\n    totalCount: number\r\n    error: string\r\n    items: ResponseTaskType []\r\n}\r\nexport type ResponseTaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type  UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1',\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"4c618d05-4087-4c56-9fa2-e412fa4c037d\"\r\n    }\r\n})\r\n\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport const authApi = {\r\n    authMe() {\r\n        return instance.get<CommonResponseType<{ id: number, email: string, login: string }>>(`/auth/me`)\r\n    },\r\n    login(params: LoginParamsType) {\r\n        return instance.post<CommonResponseType<{ userId?: number }>>(`/auth/login`, params)\r\n    },\r\n    logout() {\r\n        return instance.delete<CommonResponseType>(`/auth/login`)\r\n    }\r\n}\r\n\r\n\r\ntype CommonResponseType<T = {}> = {\r\n    resultCode: number\r\n    messages: string []\r\n    fieldsErrors: string []\r\n    data: T\r\n}\r\n","import {RootThunkType} from \"../app/Redux-store\";\r\nimport {setAppStatus} from \"../app/app-reducer\";\r\nimport {authApi, LoginParamsType} from \"../api/authApi\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../helpers/error-helpers\";\r\n\r\n\r\nconst initState: InitStateType = {\r\n    isLoggedIn: false\r\n}\r\n\r\n\r\nexport const authReducer = (state: InitStateType = initState, action: AuthActionType): InitStateType => {\r\n    switch (action.type) {\r\n        case \"login/LOGGED_IN\":\r\n            return {...state, isLoggedIn: action.payload.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//action creators\r\nexport const setIsLoggedIn = (value: boolean) => ({type: 'login/LOGGED_IN', payload: {value}} as const)\r\n\r\n//Enum\r\nenum ResponseStatusCodes {\r\n    success = 0,\r\n    error = 1,\r\n    captcha = 10\r\n}\r\n\r\n//Thunk creators\r\nexport const loginTC = (params: LoginParamsType): RootThunkType => async dispatch => {\r\n    dispatch(setAppStatus('loading'))\r\n    try {\r\n        let {data} = await authApi.login(params)\r\n        if (data.resultCode === ResponseStatusCodes.success) {\r\n            dispatch(setIsLoggedIn(true))\r\n            dispatch(setAppStatus('succeeded'))\r\n        } else {\r\n            handleServerAppError(data, dispatch)\r\n        }\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\n\r\nexport const logoutTC = (): RootThunkType => async dispatch => {\r\n    dispatch(setAppStatus('loading'))\r\n    try {\r\n        const {data} = await authApi.logout()\r\n        if (data.resultCode === ResponseStatusCodes.success) {\r\n            dispatch(setIsLoggedIn(false))\r\n            dispatch(setAppStatus('succeeded'))\r\n        } else {\r\n            handleServerAppError(data, dispatch)\r\n        }\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\n\r\n//actions\r\nexport type AuthActionType = ReturnType<typeof setIsLoggedIn>\r\ntype InitStateType = {\r\n    isLoggedIn: boolean\r\n}","import {setAppError, SetErrorActionType, setAppStatus, SetStatusActionType} from \"../app/app-reducer\";\r\nimport {CommonResponseType} from \"../api/tasksApi\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nexport const handleServerAppError = <T>(data: CommonResponseType<T>, dispatch: ErrorHelpersDispatchType) => {\r\n    dispatch(setAppError(data.messages.length ? data.messages[0]: \"Something wrong. Try later!\"))\r\n    dispatch(setAppStatus('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: ErrorHelpersDispatchType) => {\r\n    dispatch(setAppError(error.message ? error.message : \"Some error occurred\"))\r\n    dispatch(setAppStatus('failed'))\r\n}\r\n\r\n\r\ntype ErrorHelpersDispatchType = Dispatch<SetErrorActionType | SetStatusActionType>","import {RootThunkType} from \"./Redux-store\";\r\nimport {authApi} from \"../api/authApi\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../helpers/error-helpers\";\r\nimport {setIsLoggedIn} from \"../Login/auth-reducer\";\r\n\r\nconst initState: InitStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    theme: 'light',\r\n    isInitialized: false\r\n}\r\n\r\n\r\nexport const appReducer = (state: InitStateType = initState, action: AppActionsType): InitStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-THEME':\r\n            return {...state, theme: action.theme}\r\n        case 'APP/SET-INITIALIZED':\r\n            return {...state, isInitialized: action.value}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\n\r\n//actions\r\nexport const setAppError = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatus = (status: StatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppInitialized = (value: boolean) => ({type: 'APP/SET-INITIALIZED', value} as const)\r\nexport const setAppTheme = (theme: ThemeType) => ({type: 'APP/SET-THEME', theme} as const)\r\n\r\n//Enum\r\nenum ResponseStatusCodes {\r\n    success = 0,\r\n    error = 1,\r\n    captcha = 10\r\n}\r\n\r\n// thunk\r\nexport const initializeApp = (): RootThunkType => async dispatch => {\r\n    try {\r\n        const {data} = await authApi.authMe()\r\n        if (data.resultCode === ResponseStatusCodes.success) {\r\n            dispatch(setIsLoggedIn(true))\r\n        } else {\r\n            handleServerAppError(data, dispatch)\r\n        }\r\n        dispatch(setAppInitialized(true))\r\n    } catch (e: any) {\r\n        handleServerNetworkError(e, dispatch)\r\n    }\r\n}\r\n\r\n//types\r\nexport type InitStateType = {\r\n    status: StatusType\r\n    error: string | null\r\n    // true, когда приложение проинициализировалось (проверили юзера, получили настройки и т.д.)\r\n    isInitialized: boolean\r\n    theme: ThemeType\r\n}\r\nexport type StatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type ThemeType = 'light' | 'dark'\r\n\r\nexport type SetErrorActionType = ReturnType<typeof setAppError>\r\nexport type SetStatusActionType = ReturnType<typeof setAppStatus>\r\nexport type SetInitializedActionType = ReturnType<typeof setAppInitialized>\r\nexport type SetAppThemeActionType = ReturnType<typeof setAppTheme>\r\nexport type AppActionsType = SetErrorActionType\r\n    | SetStatusActionType\r\n    | SetInitializedActionType\r\n    | SetAppThemeActionType\r\n\r\n","import {ResponseTaskType, tasksAPI, TaskStatuses, UpdateTaskModelType} from \"../../api/tasksApi\";\r\nimport {AddTodoListACType, RemoveTodoListACType, SetTodoListsACType} from \"./todo-reducer\";\r\nimport {RootReducerType, RootThunkType} from \"../../app/Redux-store\";\r\nimport {SetErrorActionType, setAppStatus} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../helpers/error-helpers\";\r\nimport {AxiosError} from \"axios\";\r\n\r\n\r\nexport let initialState: TaskStateType = {}\r\n\r\nexport const taskReducer = (state = initialState, action: TaskActionsType): TaskStateType => {\r\n    switch (action.type) {\r\n        case 'TASKS/REMOVE-TASK':\r\n            return {\r\n                ...state, [action.payload.todolistId]: state[action.payload.todolistId].filter(t =>\r\n                    t.id !== action.payload.taskId)\r\n            }\r\n        case 'TASKS/ADD-TASK':\r\n            return {\r\n                ...state,\r\n                [action.payload.task.todoListId]: [action.payload.task, ...state[action.payload.task.todoListId]]\r\n            }\r\n        case 'TASKS/CHANGE-TASK-STATUS':\r\n            return {\r\n                ...state, [action.payload.todolistId]: state[action.payload.todolistId].map(t =>\r\n                    t.id === action.payload.taskId ? {...t, status: action.payload.status} : t)\r\n            }\r\n        case 'TASKS/CHANGE-TASK-TITLE':\r\n            return {\r\n                ...state, [action.payload.todolistId]: state[action.payload.todolistId].map(t =>\r\n                    t.id === action.payload.taskId ? {...t, title: action.payload.title} : t)\r\n            }\r\n        case \"TASKS/SET_TASKS\":\r\n            return {...state, [action.payload.todoListId]: action.payload.tasks}\r\n        case \"TODOS/ADD-TODOLIST\":\r\n            return {...state, [action.payload.todolist.id]: []}\r\n        case \"TODOS/REMOVE-TODOLIST\":\r\n            const copyState = {...state}\r\n            delete copyState[action.payload.id]\r\n            return copyState\r\n        case 'TODOS/SET-TODOS': {\r\n            const stateCopy = {...state}\r\n            action.todos.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy;\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n// Action Creators\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({\r\n    type: 'TASKS/REMOVE-TASK',\r\n    payload: {taskId, todolistId}\r\n} as const)\r\nexport const addTaskAC = (task: ResponseTaskType) => ({type: 'TASKS/ADD-TASK', payload: {task}} as const)\r\nexport const changeTaskStatusAC = (status: TaskStatuses, taskId: string, todolistId: string) =>\r\n    ({\r\n        type: 'TASKS/CHANGE-TASK-STATUS',\r\n        payload: {\r\n            status,\r\n            taskId,\r\n            todolistId\r\n        }\r\n    } as const)\r\nexport const changeTaskTitleAC = (title: string, taskId: string, todolistId: string) =>\r\n    ({\r\n        type: 'TASKS/CHANGE-TASK-TITLE',\r\n        payload: {\r\n            title,\r\n            taskId,\r\n            todolistId\r\n        }\r\n    } as const)\r\nexport const setTaskAC = (tasks: Array<ResponseTaskType>, todoListId: string) =>\r\n    ({type: 'TASKS/SET_TASKS', payload: {tasks, todoListId}} as const)\r\n\r\n\r\n//Enum\r\n\r\nenum ResponseStatusCodes {\r\n    success = 0,\r\n    error = 1,\r\n    captcha = 10\r\n}\r\n\r\n//Thunk Creators\r\nexport const getTasks = (todoListId: string): RootThunkType => async dispatch => {\r\n    try {\r\n        dispatch(setAppStatus('loading'))\r\n        let data = await tasksAPI.getTasks(todoListId)\r\n        if (data.error === null) {\r\n            dispatch(setTaskAC(data.items, todoListId))\r\n            dispatch(setAppStatus('succeeded'))\r\n        }\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\nexport const deleteTask = (taskId: string, todolistId: string): RootThunkType => async dispatch => {\r\n    try {\r\n        dispatch(setAppStatus('loading'))\r\n        let {data} = await tasksAPI.deleteTask(todolistId, taskId)\r\n        if (data.resultCode === ResponseStatusCodes.success) {\r\n            dispatch(removeTaskAC(taskId, todolistId))\r\n            dispatch(setAppStatus('succeeded'))\r\n        } else {\r\n            handleServerAppError(data, dispatch)\r\n        }\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\nexport const createFetchedTask = (title: string, todolistId: string): RootThunkType => async dispatch => {\r\n    try {\r\n        dispatch(setAppStatus('loading'))\r\n        let {data} = await tasksAPI.createTask(todolistId, title)\r\n        if (data.resultCode === ResponseStatusCodes.success) {\r\n            dispatch(addTaskAC(data.data.item))\r\n            dispatch(setAppStatus('succeeded'))\r\n        } else {\r\n            handleServerAppError(data, dispatch)\r\n        }\r\n    } catch (error: any) {\r\n        debugger\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\nexport const updateFetchedTaskStatus = (todolistId: string, taskId: string, status: TaskStatuses): RootThunkType =>\r\n    async (dispatch, getState: () => RootReducerType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            console.warn(\"task not found in the state\")\r\n            return\r\n        }\r\n        const model: UpdateTaskModelType = {\r\n            status,\r\n            title: task.title,\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n        }\r\n        try {\r\n            dispatch(setAppStatus('loading'))\r\n            let {data} = await tasksAPI.updateTaskStatus(todolistId, taskId, model)\r\n            if (data.resultCode === ResponseStatusCodes.success) {\r\n                dispatch(changeTaskStatusAC(status, taskId, todolistId))\r\n                dispatch(setAppStatus('succeeded'))\r\n            } else {\r\n                handleServerAppError(data, dispatch)\r\n            }\r\n        } catch (error: any) {\r\n            handleServerNetworkError(error, dispatch)\r\n        }\r\n    }\r\nexport const updateFetchedTaskTitle = (todolistId: string, taskId: string, title: string): RootThunkType =>\r\n    async (dispatch, getState: () => RootReducerType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            console.warn(\"task not found in the state\")\r\n            return\r\n        }\r\n        const model: UpdateTaskModelType = {\r\n            status: task.status,\r\n            title: title,\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n        }\r\n        try {\r\n            dispatch(setAppStatus('loading'))\r\n            let {data} = await tasksAPI.updateTaskTitle(todolistId, taskId, model)\r\n            if (data.resultCode === ResponseStatusCodes.success) {\r\n                dispatch(changeTaskTitleAC(title, taskId, todolistId))\r\n                dispatch(setAppStatus('succeeded'))\r\n            } else {\r\n                handleServerAppError(data, dispatch)\r\n            }\r\n        } catch (error: any) {\r\n            handleServerNetworkError(error, dispatch)\r\n        }\r\n    }\r\n\r\n// types\r\nexport type TaskActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof changeTaskStatusAC>\r\n    | ReturnType<typeof changeTaskTitleAC>\r\n    | ReturnType<typeof setTaskAC>\r\n    | SetTodoListsACType\r\n    | AddTodoListACType\r\n    | RemoveTodoListACType\r\n    | SetErrorActionType\r\n\r\nexport type TaskStateType = {\r\n    [key: string]: Array<ResponseTaskType>\r\n}\r\n\r\n\r\n","import {toDoAPI, TodoType} from \"../../api/todoApi\";\r\nimport {RootThunkType} from \"../../app/Redux-store\";\r\nimport {setAppStatus, StatusType} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../helpers/error-helpers\";\r\n\r\n\r\nlet initialState: Array<TodoDomainType> = []\r\n\r\nexport const toDoReducer = (state = initialState, action: TodoActionsType): Array<TodoDomainType> => {\r\n    switch (action.type) {\r\n        case \"TODOS/REMOVE-TODOLIST\":\r\n            return state.filter(tl => tl.id !== action.payload.id)\r\n        case \"TODOS/ADD-TODOLIST\":\r\n            return [{...action.payload.todolist, filter:'all',entityStatus:'idle'},...state]\r\n        case \"TODOS/CHANGE-TODOLIST_ENTITY_STATUS\":\r\n            return state.map(tl => tl.id === action.payload.id ? {...tl, entityStatus: action.payload.entityStatus} : tl)\r\n        case \"TODOS/CHANGE-TODOLIST_TITLE\":\r\n            return state.map(tl => tl.id === action.payload.id ? {...tl, title: action.payload.title} : tl)\r\n        case \"TODOS/CHANGE-TODOLIST_FILTER\":\r\n            return state.map(tl => tl.id === action.payload.id ? {...tl, filter: action.payload.filter} : tl)\r\n        case \"TODOS/SET-TODOS\":\r\n            return action.todos.map(tl => ({...tl, filter: 'all', entityStatus:'idle'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// Action Creators\r\nexport const removeTodoListAC = (id: string) => ({type: \"TODOS/REMOVE-TODOLIST\", payload: {id}} as const)\r\nexport const setTodoListsAC = (todos: Array<TodoType>) => ({type: \"TODOS/SET-TODOS\", todos} as const)\r\nexport const addTodoListAC = (todolist: TodoType) => ({type: \"TODOS/ADD-TODOLIST\", payload: {todolist}} as const)\r\nexport const changeTodoListTitleAC = (id: string, title: string) => ({\r\n    type: \"TODOS/CHANGE-TODOLIST_TITLE\", payload: {title, id}} as const)\r\nexport const changeTodoListFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: \"TODOS/CHANGE-TODOLIST_FILTER\", payload: {filter, id}} as const)\r\nexport const changeTodoListEntityStatusAC = (id: string, entityStatus: StatusType) => ({\r\n    type: \"TODOS/CHANGE-TODOLIST_ENTITY_STATUS\", payload: {entityStatus, id}} as const)\r\n\r\n\r\n//Enum\r\nenum ResponseStatusCodes {\r\n    success = 0,\r\n    error = 1,\r\n    captcha = 10\r\n}\r\n//Thunk Creators\r\nexport const getTodoLists = ():RootThunkType => async dispatch => {\r\n        try {\r\n            dispatch(setAppStatus('loading'))\r\n            let {data} = await toDoAPI.getTodos()\r\n            dispatch(setTodoListsAC(data))\r\n            dispatch(setAppStatus('succeeded'))\r\n        } catch (error: any) {\r\n            handleServerNetworkError(error,dispatch)\r\n        }\r\n}\r\nexport const deleteFetchedTodolist = (todolistId: string):RootThunkType => async dispatch => {\r\n        try {\r\n            dispatch(setAppStatus('loading'))\r\n            dispatch(changeTodoListEntityStatusAC(todolistId,'loading'))\r\n            let {data} = await toDoAPI.deleteTodo(todolistId)\r\n            if (data.resultCode === ResponseStatusCodes.success) {\r\n                dispatch(removeTodoListAC(todolistId))\r\n                dispatch(setAppStatus('succeeded'))\r\n            } else {\r\n                handleServerAppError(data,dispatch)\r\n            }\r\n        } catch (error: any) {\r\n            handleServerNetworkError(error,dispatch)\r\n        }\r\n}\r\nexport const updateFetchedTodoTitle = (todolistId: string, title: string):RootThunkType => async dispatch => {\r\n        try {\r\n            dispatch(setAppStatus('loading'))\r\n            let {data} = await toDoAPI.updateTodoTitle(todolistId, title)\r\n            if (data.resultCode === ResponseStatusCodes.success) {\r\n                dispatch(changeTodoListTitleAC(todolistId, title))\r\n                dispatch(setAppStatus('succeeded'))\r\n            } else {\r\n                handleServerAppError(data,dispatch)\r\n            }\r\n        } catch (error: any) {\r\n            handleServerNetworkError(error,dispatch)\r\n        }\r\n}\r\nexport const createTodolist = (title: string):RootThunkType => async dispatch => {\r\n        try {\r\n            dispatch(setAppStatus('loading'))\r\n            let data = await toDoAPI.createTodo(title)\r\n            if (data.resultCode === ResponseStatusCodes.success) {\r\n                dispatch(addTodoListAC(data.data.item))\r\n                dispatch(setAppStatus('succeeded'))\r\n            } else {\r\n                handleServerAppError(data, dispatch)\r\n            }\r\n        } catch (error: any) {\r\n            handleServerNetworkError(error,dispatch)\r\n        }\r\n}\r\n\r\n// types\r\nexport type SetTodoListsACType = ReturnType<typeof setTodoListsAC>\r\nexport type AddTodoListACType = ReturnType<typeof addTodoListAC>\r\nexport type RemoveTodoListACType = ReturnType<typeof removeTodoListAC>\r\n\r\nexport type TodoActionsType =\r\n    | RemoveTodoListACType\r\n    | AddTodoListACType\r\n    | ReturnType<typeof changeTodoListTitleAC>\r\n    | ReturnType<typeof changeTodoListFilterAC>\r\n    | ReturnType<typeof changeTodoListEntityStatusAC>\r\n    | SetTodoListsACType\r\n\r\nexport type TodoDomainType = TodoType & {\r\n    filter: FilterValuesType\r\n    entityStatus : StatusType\r\n}\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1',\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"4c618d05-4087-4c56-9fa2-e412fa4c037d\"\r\n    }\r\n})\r\n\r\n//api\r\nexport const toDoAPI = {\r\n    getTodos() {\r\n        return instance.get<Array<TodoType>>('/todo-lists')\r\n    },\r\n    createTodo(title: string) {\r\n        return instance.post<CommonResponseType<{ item: TodoType }>>(`/todo-lists`, {title})\r\n            .then(res => res.data)\r\n    },\r\n    deleteTodo(todolistId: string) {\r\n        return instance.delete<CommonResponseType>(`/todo-lists/${todolistId}`)\r\n    },\r\n    updateTodoTitle(todolistId: string, title: string) {\r\n        return instance.put<CommonResponseType>(`/todo-lists/${todolistId}`, {title})\r\n    }\r\n}\r\n\r\n//types\r\nexport type TodoType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\ntype CommonResponseType<T = {}> = {\r\n    resultCode: number\r\n    messages: string []\r\n    fieldsErrors: string []\r\n    data: T\r\n}\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {TaskActionsType, taskReducer} from \"../features/Todolists/task-reducer\";\r\nimport {TodoActionsType, toDoReducer} from \"../features/Todolists/todo-reducer\";\r\nimport {TypedUseSelectorHook, useSelector} from \"react-redux\";\r\nimport thunk, {ThunkAction} from \"redux-thunk\";\r\nimport {AppActionsType, appReducer} from \"./app-reducer\";\r\nimport {AuthActionType, authReducer} from \"../Login/auth-reducer\";\r\n\r\nexport type RootReducerType = ReturnType<typeof rootReducer>\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: taskReducer,\r\n    todoLists: toDoReducer,\r\n    app:appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport let store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\n\r\nexport type RootAppActions = TodoActionsType | AppActionsType | TaskActionsType | AuthActionType\r\n\r\n//ThunkAction<any,any, any, any>\r\n//1. what returned function (void)\r\n//2. rootState type\r\n//3. extra arguments (unknown)\r\n//4. Action Types\r\nexport type RootThunkType<ReturnType = void> = ThunkAction<ReturnType, RootReducerType, unknown, RootAppActions>\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<RootReducerType> = useSelector;\r\n\r\n\r\n\r\n//@ts-ignore\r\nwindow.store = store","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@mui/material\";\r\nimport {AddBox} from \"@mui/icons-material\";\r\nimport {ThemeType} from \"../../app/app-reducer\";\r\nimport s from \"./AddItemForm.module.css\";\r\n\r\n\r\ntype AddItemFormPropsType = {\r\n    callBack: (value: string) => void\r\n    disabled?: boolean\r\n    theme?: ThemeType\r\n}\r\n\r\nexport const AddItemForm = React.memo(({callBack, disabled = false, theme = 'light'}: AddItemFormPropsType) => {\r\n\r\n    const [newTaskTitle, setNewTaskTitle] = useState(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (newTaskTitle.trim()) {\r\n            callBack(newTaskTitle)\r\n            setNewTaskTitle(\"\")\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n\r\n\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTaskTitle(e.currentTarget.value)\r\n        setError(null)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null)\r\n            setError(null)\r\n        if (e.key === \"Enter\" && newTaskTitle.trim()) {\r\n            callBack(newTaskTitle)\r\n            setNewTaskTitle(\"\")\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n    return (\r\n        <div className={theme === 'light' ? s.lightTextField : s.darkTextField}>\r\n            <TextField\r\n                variant={\"outlined\"}\r\n                disabled={disabled}\r\n                value={newTaskTitle}\r\n                size={\"small\"}\r\n                onChange={onChangeTitleHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                error={!!error}\r\n                helperText={error && \"Title is required!\"}\r\n                label={'title'}\r\n                sx={{\r\n                    input: {\r\n                        height: \"20px\",\r\n                        border: theme === 'light' ? '1px solid #2d2828' : '1px solid white',\r\n                        borderRadius: '4px',\r\n                    },\r\n                }}\r\n            />\r\n\r\n            <IconButton onClick={addItem} color={\"secondary\"}\r\n                        sx={{color: theme === 'light' ? '#4a4848' : 'white'}}\r\n                        disabled={disabled}>\r\n                <AddBox color={\"inherit\"}/>\r\n            </IconButton>\r\n\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@mui/material\";\r\nimport {ModeEditOutline} from \"@mui/icons-material\";\r\nimport {ThemeType} from \"../../app/app-reducer\";\r\nimport s from './EditableSpan.module.css'\r\n\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    callBack: (title: string) => void\r\n    theme?: ThemeType\r\n}\r\n\r\nexport const EditableSpan = React.memo(({theme, ...props}: EditableSpanPropsType) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [title, setTitle] = useState(\"\")\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n        if (props.title) {\r\n            setTitle(props.title)\r\n        }\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.callBack(title)\r\n    }\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            offEditMode()\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                         variant={'standard'}\r\n                         sx={{width: \"130px\", color: \"white\"}}\r\n                         value={title}\r\n                         color={\"secondary\"}\r\n                         onBlur={offEditMode}\r\n                         autoFocus\r\n                         onChange={onChangeTitleHandler}\r\n                         onKeyPress={onKeyPressHandler}/>\r\n            : <span onDoubleClick={onEditMode}>{props.title}\r\n                <IconButton onClick={onEditMode} sx={{color: theme === 'light' ? '#4a4848' : 'white'}}>\r\n                    <ModeEditOutline fontSize={\"small\"}/>\r\n                </IconButton>\r\n        </span>\r\n    )\r\n})","import React, {ChangeEvent, FC, useCallback} from \"react\";\r\nimport {Checkbox, ListItem} from \"@mui/material\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport IconButton from \"@mui/material/IconButton/IconButton\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport {ResponseTaskType, TaskStatuses} from \"../../../../api/tasksApi\";\r\nimport {useTypedSelector} from \"../../../../app/Redux-store\";\r\nimport {ThemeType} from \"../../../../app/app-reducer\";\r\n\r\n\r\ntype TaskPropsType = {\r\n    task: ResponseTaskType\r\n    changeTaskTitle: (taskId: string, title: string) => void\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses) => void\r\n    removeTask: (taskId: string) => void\r\n    todolistId:string\r\n}\r\n\r\nexport const Task: FC<TaskPropsType> = React.memo(({\r\n                                                       task,\r\n                                                       changeTaskTitle,\r\n                                                       changeTaskStatus,\r\n                                                       removeTask,todolistId\r\n                                                   }) => {\r\n\r\n    const theme = useTypedSelector<ThemeType>(state => state.app.theme)\r\n\r\n    const changeTaskStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let value = e.currentTarget.checked\r\n        changeTaskStatus(task.id, value ? TaskStatuses.Completed : TaskStatuses.New)\r\n    }\r\n    const changeTaskTitleHandler = useCallback((title: string) => {\r\n        changeTaskTitle(task.id, title)\r\n    }, [changeTaskTitle, task.id])\r\n\r\n    return <div>\r\n        <ListItem\r\n            disableGutters\r\n            divider\r\n            sx={{paddingTop: \"0px,3px\", display: \"flex\", justifyContent: \"space-between\"}}\r\n            key={task.id}\r\n            className={task.status === TaskStatuses.Completed ? \"isDone\" : \"\"}>\r\n            <Checkbox checked={task.status === TaskStatuses.Completed} color={'secondary'}\r\n                      onChange={changeTaskStatusHandler}/>\r\n            <EditableSpan title={task.title} callBack={changeTaskTitleHandler} theme={theme}/>\r\n            <IconButton onClick={() => removeTask(task.id)}\r\n                        sx={{color: theme === 'light' ? '#4a4848' : 'white'}}\r\n                        color={\"secondary\"}>\r\n                <DeleteIcon/>\r\n            </IconButton>\r\n        </ListItem>\r\n    </div>\r\n})","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport IconButton from \"@mui/material/IconButton/IconButton\";\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport {Button, List, Typography} from \"@mui/material\";\r\nimport {\r\n    changeTodoListFilterAC,\r\n    deleteFetchedTodolist,\r\n    FilterValuesType, TodoDomainType,\r\n    updateFetchedTodoTitle\r\n} from \"../todo-reducer\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {\r\n    createFetchedTask,\r\n    deleteTask,\r\n    getTasks,\r\n    updateFetchedTaskStatus,\r\n    updateFetchedTaskTitle\r\n} from \"../task-reducer\";\r\nimport {ResponseTaskType, TaskStatuses} from \"../../../api/tasksApi\";\r\nimport {useTypedSelector} from \"../../../app/Redux-store\";\r\nimport {ThemeType} from \"../../../app/app-reducer\";\r\n\r\n\r\ntype TodoListPropsType = {\r\n    todolist: TodoDomainType\r\n    tasks: Array<ResponseTaskType>\r\n}\r\n\r\nexport const Todolist = React.memo(({todolist, tasks}: TodoListPropsType) => {\r\n    const {id, filter, entityStatus, title,} = todolist\r\n    const dispatch = useDispatch()\r\n    const theme = useTypedSelector<ThemeType>(state => state.app.theme)\r\n\r\n    useEffect(() => {\r\n        dispatch(getTasks(todolist.id))\r\n    }, [])\r\n\r\n    const removeTask = useCallback((taskId: string) => {\r\n        dispatch(deleteTask(taskId, id))\r\n    }, [dispatch, id])\r\n\r\n    const addTask = useCallback((newTaskTitle: string) => {\r\n        dispatch(createFetchedTask(newTaskTitle, id))\r\n    }, [dispatch, id])\r\n\r\n    const changeTaskStatus = useCallback((taskId: string, status: TaskStatuses) => {\r\n        dispatch(updateFetchedTaskStatus(id, taskId, status))\r\n    }, [dispatch, id])\r\n\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        dispatch(updateFetchedTodoTitle(id, title))\r\n    }, [dispatch, id])\r\n\r\n    const removeTodolist = useCallback(() => {\r\n        dispatch(deleteFetchedTodolist(id))\r\n    }, [dispatch, id])\r\n\r\n    const changeButtonFilter = useCallback((filter: FilterValuesType) => {\r\n        dispatch(changeTodoListFilterAC(id, filter))\r\n    }, [dispatch, id])\r\n\r\n    const changeTaskTitle = useCallback((taskId: string, title: string) => {\r\n        dispatch(updateFetchedTaskTitle(id, taskId, title))\r\n    }, [dispatch, id])\r\n\r\n\r\n    let taskForTodolist = tasks;\r\n\r\n    if (filter === \"active\") {\r\n        taskForTodolist = tasks.filter(t => t.status === TaskStatuses.New);\r\n    }\r\n    if (filter === \"completed\") {\r\n        taskForTodolist = tasks.filter(t => t.status === TaskStatuses.Completed);\r\n    }\r\n\r\n    const tasksElements = taskForTodolist.map(t => {\r\n        return <Task changeTaskStatus={changeTaskStatus}\r\n                     todolistId={id}\r\n                     task={t}\r\n                     changeTaskTitle={changeTaskTitle}\r\n                     removeTask={removeTask}\r\n                     key={t.id}/>\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <Typography variant=\"h6\" align={'center'}>\r\n                <EditableSpan title={title} callBack={changeTodolistTitle} theme={theme}/>\r\n                <IconButton color={\"secondary\"} onClick={removeTodolist}\r\n                            disabled={entityStatus === 'loading'}\r\n                            sx={{color: theme === 'light' ? '#4a4848' : 'white'}}\r\n                >\r\n                    <DeleteIcon/>\r\n                </IconButton>\r\n            </Typography>\r\n            <AddItemForm callBack={addTask}\r\n                         theme={theme}\r\n                         disabled={entityStatus === 'loading'}/>\r\n            <List>\r\n                {tasksElements}\r\n            </List>\r\n            <div>\r\n                <Button variant={filter === 'all' ? \"contained\" : \"text\"} color={\"secondary\"}\r\n                        onClick={() => changeButtonFilter('all')}>all</Button>\r\n                <Button variant={filter === 'active' ? \"contained\" : \"text\"} color={\"secondary\"}\r\n                        onClick={() => changeButtonFilter('active')}>active </Button>\r\n                <Button variant={filter === 'completed' ? \"contained\" : \"text\"} color={\"secondary\"}\r\n                        onClick={() => changeButtonFilter('completed')}> completed</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n","import {Grid, Paper} from \"@mui/material\";\r\nimport React, {useCallback, useEffect} from \"react\";\r\nimport {useTypedSelector} from \"../../app/Redux-store\";\r\nimport {createTodolist, getTodoLists, TodoDomainType} from \"./todo-reducer\";\r\nimport {TaskStateType} from \"./task-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {Todolist} from \"./Todolist/Todolist\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {ThemeType} from \"../../app/app-reducer\";\r\n\r\n\r\nexport const TodoLists = () => {\r\n\r\n    const todoLists = useTypedSelector<TodoDomainType[]>(state => state.todoLists)\r\n    const tasks = useTypedSelector<TaskStateType>(state => state.tasks)\r\n    const isLoggedIn = useTypedSelector<boolean>(state => state.auth.isLoggedIn)\r\n    const theme = useTypedSelector<ThemeType>(state => state.app.theme)\r\n\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return\r\n        } else {\r\n            dispatch(getTodoLists())\r\n        }\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(createTodolist(title))\r\n    }, [dispatch])\r\n\r\n    const todolistComponents = todoLists.map(tl => {\r\n        let tasksForRender = tasks[tl.id]\r\n        return (\r\n            <Grid item key={tl.id}>\r\n                <Paper elevation={2}\r\n                       sx={{\r\n                           padding: \"10px\",\r\n                           backgroundColor: theme === 'light' ? '#e3e3e3' : '#2d2828',\r\n                           border: theme === 'dark' ? '1px solid white' : ''\r\n                       }}>\r\n                    <Todolist\r\n                        todolist={tl}\r\n                        key={tl.id}\r\n                        tasks={tasksForRender}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container sx={{padding: \"20px 0\", marginBottom: \"30px\"}}>\r\n                <AddItemForm callBack={addTodolist} theme={theme}/>\r\n            </Grid>\r\n            <Grid container spacing={4}>\r\n                {todolistComponents}\r\n            </Grid>\r\n        </>\r\n    )\r\n}","import * as React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useTypedSelector} from \"../../app/Redux-store\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setAppError} from \"../../app/app-reducer\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props,\r\n    ref,\r\n) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useTypedSelector<string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppError(null))\r\n    };\r\n\r\n    const isOpen = error !== null\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n} ","import {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from \"@mui/material\";\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useTypedSelector} from \"../app/Redux-store\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useTypedSelector<boolean>(state => state.auth.isLoggedIn)\r\n\r\n\r\n\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if(!values.email) {\r\n                return {\r\n                    email: 'email is required'\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return  {\r\n                    password: 'Password is required'\r\n                }\r\n            }\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n        },\r\n    });\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>\r\n                            To log in get registered <a href={'https://social-network.samuraijs.com/'}\r\n                                                        target={'_blank'}>here</a>\r\n                        </p>\r\n                        <p> or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label={'email'}\r\n                            margin={'normal'}\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type={'password'}\r\n                            label={'Password'}\r\n                            margin={'normal'}\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                                checked={formik.values.rememberMe}/>}\r\n                        />\r\n                        <Button type={'submit'} variant={'outlined'} color={'secondary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}","import React, {ChangeEvent, useCallback, useEffect} from 'react';\r\nimport './App.css'\r\nimport {TodoLists} from \"../features/Todolists/Todolists\";\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress, Switch,\r\n    Toolbar,\r\n    Typography\r\n} from \"@mui/material\";\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackBar/ErrorSnackbar\";\r\nimport {useTypedSelector} from \"./Redux-store\";\r\nimport {initializeApp, setAppTheme, StatusType, ThemeType} from \"./app-reducer\";\r\nimport {BrowserRouter, Route, Routes} from \"react-router-dom\";\r\nimport {Login} from \"../Login/Login\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {logoutTC} from \"../Login/auth-reducer\";\r\n\r\n\r\nexport const App = () => {\r\n\r\n    const status = useTypedSelector<StatusType>(state => state.app.status)\r\n    const theme = useTypedSelector<ThemeType>(state => state.app.theme)\r\n    const isInitialized = useTypedSelector<boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useTypedSelector<boolean>(state => state.auth.isLoggedIn)\r\n\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeApp())\r\n    }, [])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [])\r\n\r\n\r\n    const changeThemeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let value = e.currentTarget.checked\r\n        dispatch(setAppTheme(value ? 'dark' : 'light'))\r\n    }\r\n\r\n    if (!isInitialized) {\r\n        return <div style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress color={'secondary'}/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            <div className={theme === \"light\" ? 'light' : 'dark'}>\r\n                <AppBar position=\"static\" sx={{backgroundColor: theme === \"light\" ? '#4a4848' : '#e3e3e3'}}>\r\n                    <Toolbar>\r\n                        <IconButton size=\"large\" edge=\"start\" color=\"inherit\"\r\n                                    aria-label=\"menu\" sx={{mr: 2, color:theme === \"light\" ? 'white' : '#2d2828'}}>\r\n                            <MenuIcon/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\" component=\"div\"\r\n                                    sx={{flexGrow: 1, color: theme === \"light\" ? 'white' : '#2d2828'}}>\r\n                            TodoLists\r\n                        </Typography>\r\n                        <Typography sx={{color: theme === \"light\" ? 'white' : '#2d2828'}}>\r\n                            {theme === 'light' ? 'Dark theme' : 'Light theme'}\r\n                        </Typography>\r\n                        <Switch onChange={changeThemeHandler} value={theme === 'light'}/>\r\n                        {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}\r\n                        sx={{color: theme === \"light\" ? 'white' : '#2d2828'}}>Log out</Button>}\r\n                    </Toolbar>\r\n                    {status === 'loading' && <LinearProgress color=\"inherit\"/>}\r\n                </AppBar>\r\n                <Container fixed>\r\n                    <Routes>\r\n                        <Route path={'/'} element={<TodoLists/>}/>\r\n                        <Route path={'/login'} element={<Login/>}/>\r\n                    </Routes>\r\n                </Container>\r\n                <ErrorSnackbar/>\r\n            </div>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/Redux-store\";\r\nimport {App} from \"./app/App\";\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\n\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"darkTextField\":\"AddItemForm_darkTextField__3Vd7u\",\"lightTextField\":\"AddItemForm_lightTextField__2usSB\"};"],"sourceRoot":""}