{"version":3,"sources":["serviceWorker.ts","api/tasksApi.ts","features/Todolists/task-reducer.ts","api/todoApi.ts","features/Todolists/todo-reducer.ts","app/Redux-store.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/Todolists/Todolist/Task/Task.tsx","features/Todolists/Todolist/Todolist_.tsx","features/Todolists/Todolists.tsx","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","instance","axios","create","baseURL","withCredentials","headers","tasksAPI","todolistId","get","then","res","data","title","post","taskId","delete","model","put","initialState","removeTaskAC","type","payload","changeTaskStatusAC","status","changeTaskTitleAC","setTaskAC","tasks","todoListId","toDoAPI","changeTodoListTitleAC","id","rootReducer","combineReducers","state","action","filter","t","task","map","todolist","copyState","stateCopy","todos","forEach","tl","todoLists","store","createStore","applyMiddleware","thunk","useTypedSelector","useSelector","AddItemForm","React","memo","callBack","useState","newTaskTitle","setNewTaskTitle","error","setError","TextField","variant","value","size","color","onChange","e","currentTarget","onKeyPress","key","trim","helperText","label","sx","input","height","IconButton","onClick","AddBox","EditableSpan","props","editMode","setEditMode","setTitle","onEditMode","offEditMode","width","onBlur","autoFocus","onDoubleClick","ModeEditOutline","fontSize","Task","changeTaskTitle","changeTaskStatus","removeTask","changeTaskTitleHandler","useCallback","ListItem","disableGutters","divider","paddingTop","display","justifyContent","className","Completed","Checkbox","checked","New","Todolist_","dispatch","useDispatch","useEffect","a","items","console","warn","resultCode","Error","deleteTask","addTask","item","createFetchedTask","getState","find","deadline","description","priority","startDate","updateFetchedTaskStatus","changeTodolistTitle","updateFetchedTodoTitle","removeTodolist","changeButtonFilter","changeTodoListFilterAC","updateFetchedTaskTitle","taskForTodolist","tasksElements","Typography","align","List","Button","TodoLists","todolistComponents","tasksForRender","Grid","Paper","elevation","padding","App","addTodolist","createTodolist","AppBar","position","Toolbar","edge","aria-label","mr","component","flexGrow","Container","fixed","container","marginBottom","spacing","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.48e8a49b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1',\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"4c618d05-4087-4c56-9fa2-e412fa4c037d\"\r\n    }\r\n})\r\n\r\n//api\r\nexport const tasksAPI = {\r\n    getTasks(todolistId: string) {\r\n        return instance.get<ResponseTasksType>(`/todo-lists/${todolistId}/tasks`).then(res => res.data)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<CommonResponseType<{ item: ResponseTaskType }>>(`/todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<CommonResponseType>(`/todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTaskStatus(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<CommonResponseType>(`/todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n    updateTaskTitle(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<CommonResponseType>(`/todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n}\r\n\r\n//types\r\ntype CommonResponseType<T = {}> = {\r\n    resultCode: number\r\n    messages: string []\r\n    fieldsErrors: string []\r\n    data: T\r\n}\r\nexport type ResponseTasksType = {\r\n    totalCount: number\r\n    error: string\r\n    items: ResponseTaskType []\r\n}\r\nexport type ResponseTaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport type  UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\n","import {ResponseTaskType, tasksAPI, TaskStatuses, UpdateTaskModelType} from \"../../api/tasksApi\";\r\nimport {addTodoListACType, removeTodoListACType, setTodoListsACType} from \"./todo-reducer\";\r\nimport {RootReducerType} from \"../../app/Redux-store\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\n\r\n\r\n\r\n\r\nexport let initialState: TaskStateType = {}\r\n\r\nexport const taskReducer = (state = initialState, action: ActionsType): TaskStateType => {\r\n    switch (action.type) {\r\n        case 'tasks/REMOVE-TASK':\r\n            return {...state, [action.payload.todolistId]: state[action.payload.todolistId].filter(t =>\r\n                    t.id !== action.payload.taskId)}\r\n        case 'tasks/ADD-TASK':\r\n            return {...state,\r\n                [action.payload.task.todoListId]: [action.payload.task, ...state[action.payload.task.todoListId]]}\r\n        case 'tasks/CHANGE-TASK-STATUS':\r\n            return {...state, [action.payload.todolistId]: state[action.payload.todolistId].map(t =>\r\n                    t.id === action.payload.taskId ? {...t, status: action.payload.status} : t)}\r\n        case 'tasks/CHANGE-TASK-TITLE':\r\n            return {...state, [action.payload.todolistId]: state[action.payload.todolistId].map(t =>\r\n                    t.id === action.payload.taskId ? {...t, title: action.payload.title} : t)}\r\n        case \"tasks/SET_TASKS\":\r\n            return {...state, [action.payload.todoListId]: action.payload.tasks}\r\n        case \"todos/ADD-TODOLIST\":\r\n            return {...state, [action.payload.todolist.id]:[]}\r\n        case \"todos/REMOVE-TODOLIST\":\r\n            const copyState = {...state}\r\n            delete copyState[action.payload.id]\r\n            return copyState\r\n        case 'todos/SET-TODOS': {\r\n            const stateCopy = {...state}\r\n            action.todos.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy;\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n// Action Creators\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({\r\n        type: 'tasks/REMOVE-TASK',\r\n        payload: {taskId, todolistId}\r\n    } as const)\r\nexport const addTaskAC = (task: ResponseTaskType) => ({type: 'tasks/ADD-TASK', payload: {task}} as const)\r\nexport const changeTaskStatusAC = (status: TaskStatuses, taskId: string, todolistId: string) =>\r\n    ({\r\n    type: 'tasks/CHANGE-TASK-STATUS',\r\n    payload: {\r\n        status,\r\n        taskId,\r\n        todolistId\r\n    }\r\n} as const)\r\nexport const changeTaskTitleAC = (title:string, taskId:string, todolistId:string) =>\r\n    ({\r\n    type: 'tasks/CHANGE-TASK-TITLE',\r\n    payload: {\r\n        title,\r\n        taskId,\r\n        todolistId\r\n    }\r\n} as const)\r\nexport const setTaskAC = (tasks: Array<ResponseTaskType>, todoListId: string) =>\r\n    ({type: 'tasks/SET_TASKS', payload: {tasks, todoListId}} as const)\r\n\r\n\r\n//Thunk Creators\r\nexport const getTasks = (todoListId: string) => {\r\n    return async (dispatch: ThunkDispatch<RootReducerType, unknown, ActionsType>) => {\r\n        try {\r\n            let data = await tasksAPI.getTasks(todoListId)\r\n            dispatch(setTaskAC(data.items, todoListId))\r\n\r\n        } catch (e: any) {\r\n            console.warn(e)\r\n        }\r\n    }\r\n}\r\nexport const deleteTask = (taskId: string, todolistId: string) => {\r\n    return async (dispatch:  ThunkDispatch<RootReducerType, unknown, ActionsType>) => {\r\n        try {\r\n            let {data} = await tasksAPI.deleteTask(todolistId, taskId)\r\n            if (data.resultCode === 0) {\r\n                dispatch(removeTaskAC(taskId, todolistId))\r\n            }\r\n        } catch (e: any) {\r\n            throw new Error('что то не так')\r\n        }\r\n    }\r\n}\r\nexport const createFetchedTask = (title: string, todolistId: string) => {\r\n    return async (dispatch:  ThunkDispatch<RootReducerType, unknown, ActionsType>) => {\r\n        try {\r\n            let {data} = await tasksAPI.createTask(todolistId, title)\r\n            if (data.resultCode === 0) {\r\n                dispatch(addTaskAC(data.data.item))\r\n            }\r\n        } catch (e: any) {\r\n            console.warn(\"task not found in the state\")\r\n        }\r\n    }\r\n}\r\nexport const updateFetchedTaskStatus = (todolistId: string, taskId: string, status: TaskStatuses) => {\r\n    return async (dispatch: ThunkDispatch<RootReducerType, unknown, ActionsType>, getState: () => RootReducerType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if(!task) {\r\n            console.warn(\"task not found in the state\")\r\n            return\r\n        }\r\n        const model: UpdateTaskModelType = {\r\n            status: status,\r\n            title: task.title,\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n        }\r\n        try {\r\n            await tasksAPI.updateTaskStatus(todolistId, taskId, model)\r\n            dispatch(changeTaskStatusAC(status, taskId, todolistId))\r\n\r\n        } catch (e: any) {\r\n\r\n        }\r\n    }\r\n}\r\nexport const updateFetchedTaskTitle = (todolistId: string, taskId: string, title: string) => {\r\n    return async (dispatch:  ThunkDispatch<RootReducerType, unknown, ActionsType>, getState: () => RootReducerType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if(!task) {\r\n            console.warn(\"task not found in the state\")\r\n            return\r\n        }\r\n        const model: UpdateTaskModelType = {\r\n            status: task.status,\r\n            title: title,\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n        }\r\n        try {\r\n            await tasksAPI.updateTaskTitle(todolistId, taskId, model)\r\n            dispatch(changeTaskTitleAC(title, taskId, todolistId))\r\n\r\n        } catch (e: any) {\r\n\r\n        }\r\n    }\r\n}\r\n\r\n// types\r\nexport type ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof changeTaskStatusAC>\r\n    | ReturnType<typeof changeTaskTitleAC>\r\n    | ReturnType<typeof setTaskAC>\r\n    | setTodoListsACType\r\n    | addTodoListACType\r\n    | removeTodoListACType\r\n\r\nexport type TaskStateType = {\r\n    [key: string]: Array<ResponseTaskType>\r\n}\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1',\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"4c618d05-4087-4c56-9fa2-e412fa4c037d\"\r\n    }\r\n})\r\n\r\n//api\r\nexport const toDoAPI = {\r\n    getTodos() {\r\n        return instance.get<Array<TodoType>>('/todo-lists')\r\n    },\r\n    createTodo(title: string) {\r\n        return instance.post<CommonResponseType<{ item: TodoType }>>(`/todo-lists`, {title})\r\n            .then(res => res.data)\r\n    },\r\n    deleteTodo(todolistId: string) {\r\n        return instance.delete<CommonResponseType>(`/todo-lists/${todolistId}`)\r\n    },\r\n    updateTodoTitle(todolistId: string, title: string) {\r\n        return instance.put<CommonResponseType>(`/todo-lists/${todolistId}`, {title})\r\n    }\r\n}\r\n\r\n//types\r\nexport type TodoType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\ntype CommonResponseType<T = {}> = {\r\n    resultCode: number\r\n    messages: string []\r\n    fieldsErrors: string []\r\n    data: T\r\n}\r\n\r\n","import {toDoAPI, TodoType} from \"../../api/todoApi\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {RootReducerType} from \"../../app/Redux-store\";\r\n\r\n\r\nlet initialState: Array<TodoDomainType> = []\r\n\r\nexport const toDoReducer = (state = initialState, action: ActionsType): Array<TodoDomainType> => {\r\n    switch (action.type) {\r\n        case \"todos/REMOVE-TODOLIST\":\r\n            return state.filter(tl => tl.id !== action.payload.id)\r\n        case \"todos/ADD-TODOLIST\":\r\n            return [{...action.payload.todolist, filter:'all'},...state]\r\n        case \"todos/CHANGE-TODOLIST_TITLE\":\r\n            return state.map(tl => tl.id === action.payload.id ? {...tl, title: action.payload.title} : tl)\r\n        case \"todos/CHANGE-TODOLIST_FILTER\":\r\n            return state.map(tl => tl.id === action.payload.id ? {...tl, filter: action.payload.filter} : tl)\r\n        case \"todos/SET-TODOS\":\r\n            return action.todos.map(tl => ({...tl, filter: 'all'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// Action Creators\r\nexport const removeTodoListAC = (id: string) => ({type: \"todos/REMOVE-TODOLIST\", payload: {id}} as const)\r\nexport const setTodoListsAC = (todos: Array<TodoType>) => ({type: \"todos/SET-TODOS\", todos} as const)\r\nexport const addTodoListAC = (todolist: TodoType) => ({\r\n    type: \"todos/ADD-TODOLIST\",\r\n    payload: {todolist}\r\n} as const)\r\nexport const changeTodoListTitleAC = (id: string, title: string) => ({\r\n    type: \"todos/CHANGE-TODOLIST_TITLE\",\r\n    payload: {\r\n        title,\r\n        id\r\n    }\r\n} as const)\r\nexport const changeTodoListFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: \"todos/CHANGE-TODOLIST_FILTER\", payload: {\r\n        filter,\r\n        id\r\n    }} as const)\r\n\r\n\r\n//Thunk Creators\r\n//ThunkDispatch<any, any, any>\r\n//1. rootState type\r\n//2. extra arguments (unknown)\r\n//3. Action Types\r\nexport const getTodoLists = () => async (dispatch: ThunkDispatch<RootReducerType, unknown, ActionsType>) => {\r\n    try {\r\n        let {data} = await toDoAPI.getTodos()\r\n        dispatch(setTodoListsAC(data))\r\n    } catch (e: any) {\r\n        throw new Error('ERROR')\r\n    }\r\n}\r\nexport const deleteFetchedTodolist = (todolistId: string) => {\r\n    return async (dispatch: ThunkDispatch<RootReducerType, unknown, ActionsType>) => {\r\n        try {\r\n            let {data} = await toDoAPI.deleteTodo(todolistId)\r\n            if (data.resultCode === 0) {\r\n                dispatch(removeTodoListAC(todolistId))\r\n            }\r\n        } catch (e: any) {\r\n            console.warn('ERROR')\r\n        }\r\n    }\r\n}\r\nexport const updateFetchedTodoTitle = (todolistId: string, title: string) => {\r\n    return async (dispatch: ThunkDispatch<RootReducerType, unknown, ActionsType>) => {\r\n        try {\r\n            let {data} = await toDoAPI.updateTodoTitle(todolistId, title)\r\n            if (data.resultCode === 0) {\r\n                dispatch(changeTodoListTitleAC(todolistId, title))\r\n            }\r\n        } catch (e: any) {\r\n            console.warn('ERROR')\r\n        }\r\n    }\r\n}\r\nexport const createTodolist = (title: string) => {\r\n    return async (dispatch:  ThunkDispatch<RootReducerType, unknown, ActionsType>) => {\r\n        try {\r\n            let {data} = await toDoAPI.createTodo(title)\r\n            dispatch(addTodoListAC(data.item))\r\n\r\n        } catch (e: any) {\r\n            console.warn('ERROR')\r\n        }\r\n    }\r\n}\r\n\r\n// types\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\nexport type setTodoListsACType = ReturnType<typeof setTodoListsAC>\r\nexport type addTodoListACType = ReturnType<typeof addTodoListAC>\r\nexport type removeTodoListACType = ReturnType<typeof removeTodoListAC>\r\n\r\nexport type ActionsType =\r\n    | removeTodoListACType\r\n    | addTodoListACType\r\n    | ReturnType<typeof changeTodoListTitleAC>\r\n    | ReturnType<typeof changeTodoListFilterAC>\r\n    | setTodoListsACType\r\n\r\nexport type TodoDomainType = TodoType & {\r\n    filter: FilterValuesType\r\n}\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {taskReducer} from \"../features/Todolists/task-reducer\";\r\nimport {toDoReducer} from \"../features/Todolists/todo-reducer\";\r\nimport {TypedUseSelectorHook, useDispatch, useSelector} from \"react-redux\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nexport type RootReducerType = ReturnType<typeof rootReducer>\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: taskReducer,\r\n    todoLists: toDoReducer\r\n})\r\n\r\n\r\nexport let store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\n\r\n\r\n\r\n\r\n//export const useThunkDispatch = () => useDispatch<typeof store.dispatch>()\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<RootReducerType> = useSelector;\r\n\r\n//type AppDispatch = typeof store.dispatch\r\n//export const useTypedDispatch = () => useDispatch<AppDispatch>()\r\n\r\n//@ts-ignore\r\nwindow.store = store","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@mui/material\";\r\nimport {AddBox} from \"@mui/icons-material\";\r\n\r\n\r\ntype AddItemFormPropsType = {\r\n    callBack: (value: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(({callBack,}: AddItemFormPropsType) => {\r\n\r\n    const [newTaskTitle, setNewTaskTitle] = useState(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (newTaskTitle.trim()) {\r\n            callBack(newTaskTitle)\r\n            setNewTaskTitle(\"\")\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n\r\n\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTaskTitle(e.currentTarget.value)\r\n        setError(null)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null)\r\n            setError(null)\r\n        if (e.key === \"Enter\" && newTaskTitle.trim()) {\r\n            callBack(newTaskTitle)\r\n            setNewTaskTitle(\"\")\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <TextField variant={\"outlined\"}\r\n                       value={newTaskTitle}\r\n                       size={\"small\"}\r\n                       color={'secondary'}\r\n                       onChange={onChangeTitleHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       error={!!error}\r\n                       helperText={error && \"Title is required!\"}\r\n                       label={'title'}\r\n                       sx={{\r\n                           input: {\r\n                               height: \"20px\"\r\n                           }\r\n                       }}\r\n            />\r\n\r\n            <IconButton onClick={addItem} color={\"secondary\"}>\r\n                <AddBox color={\"inherit\"}/>\r\n            </IconButton>\r\n\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@mui/material\";\r\nimport {ModeEditOutline} from \"@mui/icons-material\";\r\n\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    callBack: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [title, setTitle] = useState(\"\")\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n        if (props.title) {\r\n            setTitle(props.title)\r\n        }\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.callBack(title)\r\n    }\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            offEditMode()\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField variant={'standard'}\r\n                         sx={{width: \"130px\"}}\r\n                         value={title}\r\n                         color={\"secondary\"}\r\n                         onBlur={offEditMode}\r\n                         autoFocus\r\n                         onChange={onChangeTitleHandler}\r\n                         onKeyPress={onKeyPressHandler}/>\r\n            : <span onDoubleClick={onEditMode}>{props.title}\r\n                <IconButton onClick={onEditMode}>\r\n                    <ModeEditOutline fontSize={\"small\"}/>\r\n                </IconButton>\r\n        </span>\r\n    )\r\n})","import React, {ChangeEvent, FC, useCallback} from \"react\";\r\nimport {Checkbox, ListItem} from \"@mui/material\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport IconButton from \"@mui/material/IconButton/IconButton\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport {ResponseTaskType, TaskStatuses} from \"../../../../api/tasksApi\";\r\n\r\n\r\ntype TaskPropsType = {\r\n    task: ResponseTaskType\r\n    changeTaskTitle: (taskId: string, title: string) => void\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses) => void\r\n    removeTask: (taskId: string) => void\r\n}\r\n\r\nexport const Task: FC<TaskPropsType> = React.memo(({\r\n                                                       task,\r\n                                                       changeTaskTitle,\r\n                                                       changeTaskStatus,\r\n                                                       removeTask\r\n                                                   }) => {\r\n\r\n    const changeTaskStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let value = e.currentTarget.checked\r\n        changeTaskStatus(task.id, value ? TaskStatuses.Completed : TaskStatuses.New)\r\n    }\r\n    const changeTaskTitleHandler = useCallback((title: string) => {\r\n        changeTaskTitle(task.id, title)\r\n    }, [changeTaskTitle, task.id])\r\n\r\n    return <div>\r\n        <ListItem\r\n            disableGutters\r\n            divider\r\n            sx={{paddingTop: \"0px,3px\", display: \"flex\", justifyContent: \"space-between\"}}\r\n            key={task.id}\r\n            className={task.status === TaskStatuses.Completed ? \"isDone\" : \"\"}>\r\n            <Checkbox checked={task.status === TaskStatuses.Completed} color={'secondary'}\r\n                      onChange={changeTaskStatusHandler}/>\r\n            <EditableSpan title={task.title} callBack={changeTaskTitleHandler}/>\r\n            <IconButton onClick={() => removeTask(task.id)} color={\"secondary\"}>\r\n                <DeleteIcon/>\r\n            </IconButton>\r\n        </ListItem>\r\n    </div>\r\n})","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport IconButton from \"@mui/material/IconButton/IconButton\";\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport {Button, List, Typography} from \"@mui/material\";\r\nimport {\r\n    changeTodoListFilterAC,\r\n    deleteFetchedTodolist,\r\n    FilterValuesType,\r\n    updateFetchedTodoTitle\r\n} from \"../todo-reducer\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {\r\n    createFetchedTask,\r\n    deleteTask,\r\n    getTasks,\r\n    updateFetchedTaskStatus,\r\n    updateFetchedTaskTitle\r\n} from \"../task-reducer\";\r\nimport {ResponseTaskType, TaskStatuses} from \"../../../api/tasksApi\";\r\n\r\n\r\ntype toDoListPropsType = {\r\n    id: string\r\n    filter: FilterValuesType\r\n    title: string\r\n    tasks: Array<ResponseTaskType>\r\n}\r\n\r\nexport const Todolist_ = React.memo(({id, filter, title, tasks}: toDoListPropsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(getTasks(id))\r\n    }, [])\r\n\r\n    const removeTask = useCallback((taskId: string) => {\r\n        dispatch(deleteTask(taskId, id))\r\n    }, [dispatch, id])\r\n\r\n    const addTask = useCallback((newTaskTitle: string) => {\r\n        dispatch(createFetchedTask(newTaskTitle, id))\r\n    }, [dispatch, id])\r\n\r\n    const changeTaskStatus = useCallback((taskId: string, status: TaskStatuses) => {\r\n        dispatch(updateFetchedTaskStatus(id,taskId, status))\r\n    }, [dispatch,id])\r\n\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        dispatch(updateFetchedTodoTitle(id, title))\r\n    }, [dispatch, id])\r\n\r\n    const removeTodolist = useCallback(() => {\r\n        dispatch(deleteFetchedTodolist(id))\r\n    }, [dispatch, id])\r\n\r\n    const changeButtonFilter = useCallback((filter: FilterValuesType) => {\r\n        dispatch(changeTodoListFilterAC(id, filter))\r\n    }, [dispatch, id])\r\n\r\n    const changeTaskTitle = useCallback((taskId: string, title: string) => {\r\n        dispatch(updateFetchedTaskTitle(id, taskId, title))\r\n    }, [dispatch, id])\r\n\r\n\r\n    let taskForTodolist = tasks;\r\n\r\n    if (filter === \"active\") {\r\n        taskForTodolist = tasks.filter(t => t.status === TaskStatuses.New);\r\n    }\r\n    if (filter === \"completed\") {\r\n        taskForTodolist = tasks.filter(t => t.status === TaskStatuses.Completed);\r\n    }\r\n\r\n    const tasksElements = taskForTodolist.map(t => {\r\n        return <Task changeTaskStatus={changeTaskStatus}\r\n                     task={t}\r\n                     changeTaskTitle={changeTaskTitle}\r\n                     removeTask={removeTask}\r\n                     key={t.id}/>\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <Typography variant=\"h6\" align={'center'}>\r\n                <EditableSpan title={title} callBack={changeTodolistTitle}/>\r\n                <IconButton color={\"secondary\"} onClick={removeTodolist}>\r\n                    <DeleteIcon/>\r\n                </IconButton>\r\n            </Typography>\r\n            <AddItemForm callBack={addTask}/>\r\n            <List>\r\n                {tasksElements}\r\n            </List>\r\n            <div>\r\n                <Button variant={filter === 'all' ? \"contained\" : \"text\"} color={\"secondary\"}\r\n                        onClick={() => changeButtonFilter('all')}>all</Button>\r\n                <Button variant={filter === 'active' ? \"contained\" : \"text\"} color={\"secondary\"}\r\n                        onClick={() => changeButtonFilter('active')}>active </Button>\r\n                <Button variant={filter === 'completed' ? \"contained\" : \"text\"} color={\"secondary\"}\r\n                        onClick={() => changeButtonFilter('completed')}> completed</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n","import {Grid, Paper} from \"@mui/material\";\r\nimport React, {useEffect} from \"react\";\r\nimport {useTypedSelector} from \"../../app/Redux-store\";\r\nimport {getTodoLists, TodoDomainType} from \"./todo-reducer\";\r\nimport {TaskStateType} from \"./task-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {Todolist_} from \"./Todolist/Todolist_\";\r\n\r\n\r\n\r\nexport const TodoLists = () => {\r\n\r\n    const todoLists = useTypedSelector<TodoDomainType[]>(state => state.todoLists)\r\n    const tasks = useTypedSelector<TaskStateType>(state => state.tasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(getTodoLists())\r\n    }, [])\r\n\r\n\r\n    const todolistComponents = todoLists.map(tl => {\r\n        let tasksForRender = tasks[tl.id]\r\n        return (<Grid item key={tl.id}>\r\n                <Paper elevation={2} sx={{padding: \"10px\"}}>\r\n                    <Todolist_\r\n                        key={tl.id}\r\n                        id={tl.id}\r\n                        title={tl.title}\r\n                        filter={tl.filter}\r\n                        tasks={tasksForRender}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n    return <>\r\n        {todolistComponents}\r\n    </>\r\n}","import React, {useCallback} from 'react';\r\nimport './App.css'\r\nimport {createTodolist} from \"../features/Todolists/todo-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {TodoLists} from \"../features/Todolists/Todolists\";\r\nimport {AddItemForm} from \"../components/AddItemForm/AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Toolbar, Typography} from \"@mui/material\";\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\n\r\n\r\nexport const App = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(createTodolist(title))\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div>\r\n            <AppBar position=\"static\" color={\"secondary\"}>\r\n                <Toolbar>\r\n                    <IconButton size=\"large\" edge=\"start\" color=\"inherit\" aria-label=\"menu\" sx={{mr: 2}}>\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\r\n                        TodoLists\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container sx={{padding: \"20px 0\", marginBottom: \"30px\"}}>\r\n                    <AddItemForm callBack={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={4}>\r\n                    <TodoLists/>\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/Redux-store\";\r\nimport {App} from \"./app/App\";\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>,\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}