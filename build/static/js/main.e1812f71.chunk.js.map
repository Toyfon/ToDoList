{"version":3,"sources":["serviceWorker.ts","api/tasksApi.ts","AddItemForm.tsx","components/EditableSpan.tsx","components/Task/Task.tsx","Redux/task-reducer.ts","todolist.tsx","api/todoApi.ts","Redux/todo-reducer.ts","Redux/Redux-store.ts","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","AddItemForm","React","memo","callBack","useState","newTaskTitle","setNewTaskTitle","error","setError","TextField","variant","value","size","color","onChange","e","currentTarget","onKeyPress","key","trim","helperText","label","sx","input","height","IconButton","onClick","AddBox","EditableSpan","props","editMode","setEditMode","title","setTitle","onEditMode","offEditMode","width","onBlur","autoFocus","onDoubleClick","ModeEditOutline","fontSize","instance","axios","create","baseURL","withCredentials","headers","tasksAPI","todolistId","get","then","res","data","post","taskId","delete","Task","task","changeTaskTitleCallback","changeTaskStatusCallback","onRemoveHandler","changeTaskTitleHandler","useCallback","id","ListItem","disableGutters","divider","paddingTop","display","justifyContent","className","status","Completed","Checkbox","checked","initialState","removeTaskAC","type","payload","setTaskAC","tasks","todoListId","Todolist","filter","removeTask","changeFilter","addTask","changeTaskStatus","removeTodolist","changeTaskTitle","changeTodolistTitle","dispatch","useDispatch","useEffect","a","items","console","warn","changeButtonFilter","removeTodolistHandler","callBackHandlerForAddTask","changeTodolistTitleHandler","taskForTodolist","t","New","tasksElements","map","Typography","align","List","Button","toDoAPI","todos","rootReducer","combineReducers","state","action","isDone","stateCopy","forEach","tl","todoLists","newTodolist","s","store","createStore","applyMiddleware","thunk","useTypedSelector","useSelector","App","resultCode","Error","deleteTask","item","createFetchedTask","changeTaskStatusAC","changeTaskTitleAC","changeTodoListFilterAC","changeTodoListTitleAC","addTodolist","v1","addTodoListAC","addArrayTaskAC","response","todolistComponents","tasksForRender","Grid","Paper","elevation","padding","AppBar","position","Toolbar","edge","aria-label","mr","component","flexGrow","Container","fixed","container","marginBottom","spacing","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.e1812f71.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1',\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"4c618d05-4087-4c56-9fa2-e412fa4c037d\"\r\n    }\r\n})\r\n\r\n\r\nexport const tasksAPI = {\r\n    getTasks(todolistId: string) {\r\n        return instance.get<ResponseTasksType>(`/todo-lists/${todolistId}/tasks`).then(res => res.data)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<CommonResponseType<{ item: ResponseTaskType }>>(`/todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<CommonResponseType>(`/todo-lists/${todolistId}/tasks/${taskId}`)\r\n    }\r\n    // updateTaskTitle(todolistId:string, taskId:string, title:string) {\r\n    //     return instance.put(`/todo-lists/${todolistId}/tasks/${taskId}`,{title})\r\n    // },\r\n}\r\n\r\n\r\ntype CommonResponseType<T = {}> = {\r\n    resultCode: number\r\n    messages: string []\r\n    fieldsErrors: string []\r\n    data: T\r\n}\r\n\r\nexport type ResponseTasksType = {\r\n    totalCount: string\r\n    error: string\r\n    items: ResponseTaskType []\r\n}\r\n\r\n\r\nexport type ResponseTaskType = {\r\n    description: string\r\n    title: string\r\n    completed: boolean\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@mui/material\";\r\nimport {AddBox} from \"@mui/icons-material\";\r\n\r\n\r\ntype AddItemFormPropsType = {\r\n    callBack: (value: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo( ({\r\n                                callBack,\r\n                                ...props\r\n                            }: AddItemFormPropsType) => {\r\n\r\n    const [newTaskTitle, setNewTaskTitle] = useState(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n\r\n\r\n    const addItem = () => {\r\n        if (newTaskTitle.trim()) {\r\n            callBack(newTaskTitle)\r\n            setNewTaskTitle(\"\")\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n\r\n\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTaskTitle(e.currentTarget.value)\r\n        setError(null)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if(error !== null)\r\n        setError(null)\r\n        if (e.key === \"Enter\" && newTaskTitle.trim()) {\r\n            callBack(newTaskTitle)\r\n            setNewTaskTitle(\"\")\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <TextField variant={\"outlined\"}\r\n                       value={newTaskTitle}\r\n                       size={\"small\"}\r\n                       color={'secondary'}\r\n                       onChange={onChangeTitleHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       error={!!error}\r\n                       helperText={error && \"Title is required!\"}\r\n                       label={'title'}\r\n                       sx={{\r\n                           input: {\r\n                               height: \"20px\"\r\n                           }\r\n                       }}\r\n            />\r\n\r\n            <IconButton onClick={addItem} color={\"secondary\"}>\r\n                <AddBox color={\"inherit\"}/>\r\n            </IconButton>\r\n\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@mui/material\";\r\nimport {ModeEditOutline} from \"@mui/icons-material\";\r\n\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    callBack: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [title, setTitle] = useState(\"\")\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n        if (props.title) {\r\n            setTitle(props.title)\r\n        }\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.callBack(title)\r\n    }\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            offEditMode()\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField variant={'standard'}\r\n                         sx={{width: \"130px\"}}\r\n                         value={title}\r\n                         color={\"secondary\"}\r\n                         onBlur={offEditMode}\r\n                         autoFocus\r\n                         onChange={onChangeTitleHandler}\r\n                         onKeyPress={onKeyPressHandler}/>\r\n            : <span onDoubleClick={onEditMode}>{props.title}\r\n                <IconButton onClick={onEditMode}>\r\n                    <ModeEditOutline fontSize={\"small\"}/>\r\n                </IconButton>\r\n        </span>\r\n    )\r\n})","import React, {ChangeEvent, FC, useCallback} from \"react\";\r\nimport {Checkbox, ListItem} from \"@mui/material\";\r\nimport {EditableSpan} from \"../EditableSpan\";\r\nimport IconButton from \"@mui/material/IconButton/IconButton\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport {ResponseTaskType, TaskStatuses} from \"../../api/tasksApi\";\r\n\r\n\r\ntype TaskPropsType = {\r\n    task: ResponseTaskType\r\n    changeTaskTitleCallback: (taskId: string, title: string) => void\r\n    changeTaskStatusCallback: (taskId: string, isDone: boolean) => void\r\n    onRemoveHandler: (taskId: string) => void\r\n}\r\n\r\nexport const Task: FC<TaskPropsType> = React.memo(({\r\n                                                       task,\r\n                                                       changeTaskTitleCallback,\r\n                                                       changeTaskStatusCallback,\r\n                                                       onRemoveHandler\r\n                                                   }) => {\r\n\r\n    const changeTaskStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let value = e.currentTarget.checked\r\n        changeTaskStatusCallback(task.id, value)\r\n    }\r\n    const changeTaskTitleHandler = useCallback((title: string) => {\r\n        changeTaskTitleCallback(task.id, title)\r\n    }, [changeTaskTitleCallback, task.id])\r\n\r\n    return <div>\r\n        <ListItem\r\n            disableGutters\r\n            divider\r\n            sx={{paddingTop: \"0px,3px\", display: \"flex\", justifyContent: \"space-between\"}}\r\n            key={task.id}\r\n            className={task.status === TaskStatuses.Completed ? \"isDone\" : \"\"}>\r\n            <Checkbox checked={task.status === TaskStatuses.Completed} color={'secondary'}\r\n                      onChange={changeTaskStatusHandler}/>\r\n            <EditableSpan title={task.title} callBack={changeTaskTitleHandler}/>\r\n            <IconButton onClick={() => onRemoveHandler(task.id)} color={\"secondary\"}>\r\n                <DeleteIcon/>\r\n            </IconButton>\r\n        </ListItem>\r\n    </div>\r\n\r\n})","import {ResponseTaskType, tasksAPI} from \"../api/tasksApi\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setTodoListsACType} from \"./todo-reducer\";\r\n\r\n\r\nexport type TaskStateType = {\r\n    [key: string]: Array<ResponseTaskType>\r\n}\r\n\r\nexport let initialState: TaskStateType = {}\r\n\r\n\r\nexport const taskReducer = (state = initialState, action: ActionType): TaskStateType => {\r\n    switch (action.type) {\r\n        case 'tasks/REMOVE-TASK': {\r\n            return {\r\n                ...state,\r\n                [action.payload.todolistId]: state[action.payload.todolistId].filter(t =>\r\n                    t.id !== action.payload.taskId)\r\n            }\r\n        }\r\n        case 'tasks/ADD-TASK': {\r\n            return {\r\n                ...state,\r\n                [action.payload.task.todoListId]: [action.payload.task, ...state[action.payload.task.todoListId]],\r\n            }\r\n        }\r\n\r\n        case 'tasks/CHANGE-TASK-STATUS': {\r\n            return {\r\n                ...state,\r\n                [action.payload.todolistId]: state[action.payload.todolistId].map(t =>\r\n                    t.id === action.payload.taskId\r\n                        ? {...t, isDone: action.payload.isDone}\r\n                        : t)\r\n            }\r\n        }\r\n        case 'tasks/CHANGE-TASK-TITLE': {\r\n            return {\r\n                ...state,\r\n                [action.payload.todolistId]: state[action.payload.todolistId].map(t =>\r\n                    t.id === action.payload.taskId\r\n                        ? {...t, title: action.payload.title}\r\n                        : t)\r\n            }\r\n        }\r\n        case \"tasks/ADD-ARRAY-TASK\": {\r\n            return {\r\n                ...state,\r\n                [action.payload.todoListId]: []\r\n            }\r\n        }\r\n        case \"tasks/SET_TASKS\": {\r\n            return {\r\n        ...state,\r\n                [action.payload.todoListId]: action.payload.tasks\r\n        }\r\n    }\r\n        case 'todos/SET-TODOS': {\r\n            const stateCopy = {...state}\r\n            action.todos.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy;\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//Action Types\r\nexport type ActionType = removeTaskACType |\r\n                         addTaskACType |\r\n                         changeTaskStatusACType |\r\n                         changeTaskTitleACType |\r\n                         addArrayTaskACType |\r\n                         setTaskACType |\r\n                         setTodoListsACType\r\n\r\n\r\n// Action Creators\r\nexport type removeTaskACType = ReturnType<typeof removeTaskAC>\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => (\r\n    {\r\n        type: 'tasks/REMOVE-TASK',\r\n        payload: {taskId, todolistId}\r\n    } as const)\r\n\r\nexport type addTaskACType = ReturnType<typeof addTaskAC>\r\nexport const addTaskAC = (task:ResponseTaskType) => (\r\n    {\r\n        type: 'tasks/ADD-TASK',\r\n        payload: {\r\n            task\r\n        }\r\n    } as const)\r\n\r\nexport type changeTaskStatusACType = ReturnType<typeof changeTaskStatusAC>\r\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todolistId: string) => ({\r\n    type: 'tasks/CHANGE-TASK-STATUS',\r\n    payload: {\r\n        isDone,\r\n        taskId,\r\n        todolistId\r\n    }\r\n} as const)\r\n\r\nexport type changeTaskTitleACType = ReturnType<typeof changeTaskTitleAC>\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string) => ({\r\n    type: 'tasks/CHANGE-TASK-TITLE',\r\n    payload: {\r\n        title,\r\n        taskId,\r\n        todolistId\r\n    }\r\n} as const)\r\n\r\nexport type addArrayTaskACType = ReturnType<typeof addArrayTaskAC>\r\nexport const addArrayTaskAC = (todoListId: string) => ({type: 'tasks/ADD-ARRAY-TASK', payload: {todoListId}} as const)\r\n\r\nexport type setTaskACType = ReturnType<typeof setTaskAC>\r\nexport const setTaskAC = (tasks: Array<ResponseTaskType>, todoListId: string) => ({\r\n    type: 'tasks/SET_TASKS',\r\n    payload: {tasks, todoListId}\r\n} as const)\r\n\r\n\r\n\r\n//Thunk Creators\r\nexport const getTasks = (todoListId: string) => async (dispatch: Dispatch) => {\r\n    try {\r\n        let data = await tasksAPI.getTasks(todoListId)\r\n        dispatch(setTaskAC(data.items, todoListId))\r\n\r\n    } catch (e: any) {\r\n        console.warn(e)\r\n    }\r\n}\r\n\r\nexport const deleteTask = (taskId: string, todolistId: string) => async (dispatch: Dispatch) => {\r\n    try {\r\n        let {data} = await tasksAPI.deleteTask(todolistId, taskId)\r\n        if (data.resultCode === 0) {\r\n            dispatch(removeTaskAC(taskId, todolistId))\r\n        }\r\n    } catch (e:any) {\r\n        throw new Error('что то не так')\r\n    }\r\n}\r\n\r\nexport const createFetchedTask = (title:string,todolistId:string) => async(dispatch:Dispatch) => {\r\n    try {\r\n        let {data} = await  tasksAPI.createTask(todolistId,title)\r\n        if (data.resultCode === 0) {\r\n            dispatch(addTaskAC(data.data.item))\r\n        }\r\n    } catch (e:any) {\r\n\r\n    }\r\n}","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./components/EditableSpan\";\r\nimport IconButton from \"@mui/material/IconButton/IconButton\";\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport {Button, List, Typography} from \"@mui/material\";\r\nimport {FilterValuesType} from \"./Redux/todo-reducer\";\r\nimport {Task} from \"./components/Task/Task\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {getTasks} from \"./Redux/task-reducer\";\r\nimport {ResponseTaskType, TaskStatuses} from \"./api/tasksApi\";\r\n\r\n\r\ntype toDoListPropsType = {\r\n    id: string\r\n    filter: FilterValuesType\r\n    title: string\r\n    tasks: Array<ResponseTaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (taskId: string, isDone: boolean, todolistId: string) => void\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, title: string, todolistId: string) => void\r\n    changeTodolistTitle: (title: string, todolistId: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo(({\r\n                                        id, filter,\r\n                                        title, tasks,\r\n                                        removeTask,\r\n                                        changeFilter,\r\n                                        addTask,\r\n                                        changeTaskStatus,\r\n                                        removeTodolist,\r\n                                        changeTaskTitle,\r\n                                        changeTodolistTitle\r\n                                    }: toDoListPropsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(getTasks(id))\r\n    }, [])\r\n\r\n    const onRemoveHandler = useCallback((taskId: string) => removeTask(taskId, id), [removeTask, id])\r\n    const changeButtonFilter = useCallback((filter: FilterValuesType) => changeFilter(filter, id), [changeFilter, id])\r\n    const removeTodolistHandler = useCallback(() => {\r\n        removeTodolist(id)\r\n    }, [removeTodolist, id])\r\n    const callBackHandlerForAddTask = useCallback((newTaskTitle: string) => {\r\n        addTask(newTaskTitle, id)\r\n    }, [addTask, id])\r\n    const changeTodolistTitleHandler = useCallback((title: string) => {\r\n        changeTodolistTitle(title, id)\r\n    }, [changeTodolistTitle, id])\r\n\r\n    const changeTaskStatusCallback = useCallback((taskId: string, value: boolean) => {\r\n        changeTaskStatus(taskId, value, id)\r\n    }, [changeTaskStatus, id])\r\n\r\n    const changeTaskTitleCallback = useCallback((taskId: string, title: string) => {\r\n        changeTaskTitle(taskId, title, id)\r\n    }, [changeTaskTitle, id])\r\n\r\n\r\n    let taskForTodolist = tasks;\r\n\r\n    if (filter === \"active\") {\r\n        taskForTodolist = tasks.filter(t => t.status === TaskStatuses.New);\r\n    }\r\n    if (filter === \"completed\") {\r\n        taskForTodolist = tasks.filter(t => t.status === TaskStatuses.Completed);\r\n    }\r\n\r\n    const tasksElements = taskForTodolist.map(t => {\r\n        return <Task changeTaskStatusCallback={changeTaskStatusCallback}\r\n                     task={t}\r\n                     changeTaskTitleCallback={changeTaskTitleCallback}\r\n                     onRemoveHandler={onRemoveHandler}\r\n                     key={t.id}/>\r\n    })\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Typography variant=\"h6\" align={'center'}>\r\n                <EditableSpan title={title} callBack={changeTodolistTitleHandler}/>\r\n                <IconButton color={\"secondary\"} onClick={removeTodolistHandler}>\r\n                    <DeleteIcon/>\r\n                </IconButton>\r\n            </Typography>\r\n            <AddItemForm callBack={callBackHandlerForAddTask}/>\r\n            <List>\r\n                {tasksElements}\r\n            </List>\r\n            <div>\r\n                <Button variant={filter === 'all' ? \"contained\" : \"text\"} color={\"secondary\"}\r\n                        onClick={() => changeButtonFilter('all')}>all</Button>\r\n                <Button variant={filter === 'active' ? \"contained\" : \"text\"} color={\"secondary\"}\r\n                        onClick={() => changeButtonFilter('active')}>active </Button>\r\n                <Button variant={filter === 'completed' ? \"contained\" : \"text\"} color={\"secondary\"}\r\n                        onClick={() => changeButtonFilter('completed')}> completed</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1',\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"4c618d05-4087-4c56-9fa2-e412fa4c037d\"\r\n    }\r\n})\r\n\r\nexport const toDoAPI = {\r\n    getTodos() {\r\n        return instance.get<Array<TodoType>>('/todo-lists')\r\n    },\r\n    createTodo(title: string) {\r\n        return instance.post<CommonResponseType<{ item: TodoType }>>(`/todo-lists`, {title})\r\n            .then(res => res.data)\r\n    },\r\n    deleteTodo(todolistId: string) {\r\n        return instance.delete<CommonResponseType>(`/todo-lists/${todolistId}`)\r\n    },\r\n    updateTodoTitle(todolistId: string, title: string) {\r\n        return instance.put<CommonResponseType>(`/todo-lists/${todolistId}`, {title})\r\n    }\r\n}\r\n\r\n\r\n// берем типы из документации апи\r\ntype TodoType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\n// дженерик типизация (если не значение типа data, то по умолчанию берем пустой объект)\r\ntype CommonResponseType<T = {}> = {\r\n    resultCode: number\r\n    messages: string []\r\n    fieldsErrors: string []\r\n    data: T\r\n}","import {Dispatch} from \"redux\";\r\nimport {toDoAPI} from \"../api/todoApi\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\n\r\nlet initialState = {\r\n    todos: [] as Array<TodolistType>\r\n}\r\nexport type InitStateType = typeof initialState\r\n\r\nexport const toDoReducer = (state = initialState, action: ActionType): InitStateType => {\r\n    switch (action.type) {\r\n        case \"todos/REMOVE-TODOLIST\":\r\n            return {\r\n                ...state,\r\n                todos: state.todos.filter(tl => tl.id !== action.payload.id)\r\n            }\r\n        case \"todos/ADD-TODOLIST\":\r\n            let newTodolist: TodolistType = {\r\n                ...action.payload,\r\n                filter: \"all\"\r\n            }\r\n            return {\r\n                ...state,\r\n                todos: [...state.todos, newTodolist]\r\n            }\r\n        case \"todos/CHANGE-TODOLIST_TITLE\":\r\n            return {\r\n                ...state,\r\n                todos: state.todos\r\n                    .map(s => s.id === action.payload.id\r\n                        ?\r\n                        {...s, title: action.payload.title}\r\n                        : s)\r\n            }\r\n        case \"todos/CHANGE-TODOLIST_FILTER\":\r\n            return {\r\n                ...state,\r\n                todos: state.todos\r\n                    .map(s => s.id === action.payload.id\r\n                        ?\r\n                        {...s, filter: action.payload.filter}\r\n                        : s)\r\n            }\r\n        case \"todos/SET-TODOS\":\r\n            return {\r\n                ...state, todos: action.todos.map(tl => ({\r\n                    ...tl,\r\n                    filter: 'all'\r\n                }))\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//Action Types\r\nexport type ActionType = removeTodoListACType |\r\n                         addTodoListACType |\r\n                         changeTodoListTitleACType |\r\n                         changeTodoListFilterACType |\r\n                         setTodoListsACType\r\n\r\n// Action Creators\r\nexport type removeTodoListACType = ReturnType<typeof removeTodoListAC>\r\nexport const removeTodoListAC = (id: string) => ({type: \"todos/REMOVE-TODOLIST\", payload: {id}} as const)\r\n\r\nexport type setTodoListsACType = ReturnType<typeof setTodoListsAC>\r\nexport const setTodoListsAC = (todos: Array<any>) => ({type: \"todos/SET-TODOS\", todos} as const)\r\n\r\nexport type addTodoListACType = ReturnType<typeof addTodoListAC>\r\nexport const addTodoListAC = (title: string, id: string) => ({\r\n    type: \"todos/ADD-TODOLIST\",\r\n    payload: {title, id}\r\n} as const)\r\n\r\nexport type changeTodoListTitleACType = ReturnType<typeof changeTodoListTitleAC>\r\nexport const changeTodoListTitleAC = (id: string, title: string) => ({\r\n    type: \"todos/CHANGE-TODOLIST_TITLE\",\r\n    payload: {\r\n        title,\r\n        id\r\n    }\r\n} as const)\r\n\r\nexport type changeTodoListFilterACType = ReturnType<typeof changeTodoListFilterAC>\r\nexport const changeTodoListFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: \"todos/CHANGE-TODOLIST_FILTER\", payload: {\r\n        filter,\r\n        id\r\n    }\r\n} as const)\r\n\r\n\r\n\r\n//Thunk Creators\r\nexport const getTodoLists = () => async (dispatch: Dispatch) => {\r\n    try {\r\n        let response = await toDoAPI.getTodos()\r\n        dispatch(setTodoListsAC(response.data))\r\n    } catch (e: any) {\r\n        throw new Error('ERROR')\r\n    }\r\n}\r\n\r\n\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {taskReducer} from \"./task-reducer\";\r\nimport {toDoReducer} from \"./todo-reducer\";\r\nimport {TypedUseSelectorHook, useSelector} from \"react-redux\";\r\nimport thunk from \"redux-thunk\";\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n    tasks: taskReducer,\r\n    todoLists: toDoReducer\r\n})\r\n\r\nexport type rootReducerType = ReturnType<typeof rootReducer>\r\n\r\n\r\n\r\nexport let store = createStore(rootReducer, applyMiddleware(thunk))\r\nexport type AppStoreType = typeof store\r\n\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<rootReducerType> = useSelector;\r\n\r\n//@ts-ignore\r\nwindow.store = store","import React, {useCallback, useEffect} from 'react';\r\nimport {Todolist} from \"./todolist\";\r\nimport {v1} from \"uuid\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@mui/material\";\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport './App.css'\r\nimport {\r\n    addTodoListAC,\r\n    changeTodoListFilterAC,\r\n    changeTodoListTitleAC,\r\n    FilterValuesType, getTodoLists,\r\n    removeTodoListAC,\r\n    TodolistType\r\n} from \"./Redux/todo-reducer\";\r\nimport {\r\n    addArrayTaskAC,\r\n    changeTaskStatusAC,\r\n    changeTaskTitleAC, createFetchedTask, deleteTask,\r\n    TaskStateType\r\n} from \"./Redux/task-reducer\";\r\nimport {useTypedSelector} from \"./Redux/Redux-store\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n\r\nfunction App() {\r\n\r\n    const todoLists = useTypedSelector<TodolistType[]>(state => state.todoLists.todos)\r\n    const tasks = useTypedSelector<TaskStateType>(state => state.tasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const removeTask = useCallback((taskId: string, todolistId: string) => {\r\n        dispatch(deleteTask(taskId, todolistId))\r\n    }, [dispatch])\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        dispatch(createFetchedTask(title, todolistId))\r\n    }, [dispatch])\r\n    const changeTaskStatus = useCallback((taskId: string, isDone: boolean, todolistId: string) => {\r\n        dispatch(changeTaskStatusAC(taskId, isDone, todolistId))\r\n    }, [dispatch])\r\n    const changeTaskTitle = useCallback((taskId: string, title: string, todolistId: string) => {\r\n        dispatch(changeTaskTitleAC(taskId, title, todolistId))\r\n    }, [dispatch])\r\n\r\n\r\n    const changeFilter = useCallback((filter: FilterValuesType, todolistId: string) => {\r\n        dispatch(changeTodoListFilterAC(todolistId, filter))\r\n    }, [dispatch])\r\n    const changeTodolistTitle = useCallback((title: string, todolistId: string) => {\r\n        dispatch(changeTodoListTitleAC(todolistId, title))\r\n    }, [dispatch])\r\n    const removeTodolist = useCallback((todolistId: string) => {\r\n        dispatch(removeTodoListAC(todolistId))\r\n    }, [dispatch])\r\n    const addTodolist = useCallback((title: string) => {\r\n        const todoListId = v1()\r\n        dispatch(addTodoListAC(title, todoListId))\r\n        dispatch(addArrayTaskAC(todoListId))\r\n    }, [dispatch])\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(getTodoLists())\r\n    }, [])\r\n\r\n    const todolistComponents = todoLists.map(tl => {\r\n\r\n        let tasksForRender = tasks[tl.id]\r\n        return (<Grid item key={tl.id}>\r\n                <Paper elevation={2} sx={{padding: \"10px\"}}>\r\n                    <Todolist\r\n                        key={tl.id}\r\n                        id={tl.id}\r\n                        title={tl.title}\r\n                        filter={tl.filter}\r\n                        tasks={tasksForRender}\r\n                        removeTask={removeTask}\r\n                        changeFilter={changeFilter}\r\n                        addTask={addTask}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        removeTodolist={removeTodolist}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        changeTodolistTitle={changeTodolistTitle}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <AppBar position=\"static\" color={\"secondary\"}>\r\n                <Toolbar>\r\n                    <IconButton\r\n                        size=\"large\"\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"menu\"\r\n                        sx={{mr: 2}}\r\n                    >\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\r\n                        TodoLists\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container sx={{padding: \"20px 0\", marginBottom: \"30px\"}}>\r\n                    <AddItemForm callBack={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={4}>\r\n                    {todolistComponents}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from \"./App\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./Redux/Redux-store\";\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>,\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}