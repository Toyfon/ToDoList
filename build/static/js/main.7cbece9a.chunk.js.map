{"version":3,"sources":["serviceWorker.ts","api/tasksApi.ts","Redux/task-reducer.ts","api/todoApi.ts","Redux/todo-reducer.ts","Redux/Redux-store.ts","AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","components/Task/Task.tsx","components/Todolists/Todolist/todolist.tsx","components/Todolists/Todolists.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","instance","axios","create","baseURL","withCredentials","headers","tasksAPI","todolistId","get","then","res","data","title","post","taskId","delete","model","put","initialState","removeTaskAC","type","payload","changeTaskStatusAC","status","changeTaskTitleAC","setTaskAC","tasks","todoListId","toDoAPI","changeTodoListTitleAC","id","rootReducer","combineReducers","state","action","filter","t","task","map","todolist","stateCopy","todos","forEach","tl","todoLists","newTodolist","s","store","createStore","applyMiddleware","thunk","useTypedSelector","useSelector","AddItemForm","React","memo","callBack","useState","newTaskTitle","setNewTaskTitle","error","setError","TextField","variant","value","size","color","onChange","e","currentTarget","onKeyPress","key","trim","helperText","label","sx","input","height","IconButton","onClick","AddBox","EditableSpan","props","editMode","setEditMode","setTitle","onEditMode","offEditMode","width","onBlur","autoFocus","onDoubleClick","ModeEditOutline","fontSize","Task","changeTaskTitle","changeTaskStatus","removeTask","changeTaskTitleHandler","useCallback","ListItem","disableGutters","divider","paddingTop","display","justifyContent","className","Completed","Checkbox","checked","New","Todolist","dispatch","useDispatch","useEffect","a","items","console","warn","resultCode","Error","deleteTask","addTask","item","createFetchedTask","getState","find","deadline","description","priority","startDate","updateFetchedTaskStatus","changeTodolistTitle","updateFetchedTodoTitle","removeTodolist","changeButtonFilter","changeTodoListFilterAC","updateFetchedTaskTitle","taskForTodolist","tasksElements","Typography","align","List","Button","TodoLists","todolistComponents","tasksForRender","Grid","Paper","elevation","padding","App","addTodolist","createTodolist","AppBar","position","Toolbar","edge","aria-label","mr","component","flexGrow","Container","fixed","container","marginBottom","spacing","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.7cbece9a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\r\n\r\n\r\ntype CommonResponseType<T = {}> = {\r\n    resultCode: number\r\n    messages: string []\r\n    fieldsErrors: string []\r\n    data: T\r\n}\r\n\r\nexport type ResponseTasksType = {\r\n    totalCount: number\r\n    error: string\r\n    items: ResponseTaskType []\r\n}\r\n\r\n\r\nexport type ResponseTaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\n\r\nexport type  UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1',\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"4c618d05-4087-4c56-9fa2-e412fa4c037d\"\r\n    }\r\n})\r\n\r\n\r\nexport const tasksAPI = {\r\n    getTasks(todolistId: string) {\r\n        return instance.get<ResponseTasksType>(`/todo-lists/${todolistId}/tasks`).then(res => res.data)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<CommonResponseType<{ item: ResponseTaskType }>>(`/todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<CommonResponseType>(`/todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTaskStatus(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<CommonResponseType>(`/todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n    updateTaskTitle(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<CommonResponseType>(`/todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n}\r\n\r\n","import {ResponseTaskType, tasksAPI, TaskStatuses, UpdateTaskModelType} from \"../api/tasksApi\";\r\nimport {Dispatch} from \"redux\";\r\nimport {addTodoListACType, setTodoListsACType} from \"./todo-reducer\";\r\nimport {rootReducerType} from \"./Redux-store\";\r\n\r\n\r\nexport type TaskStateType = {\r\n    [key: string]: Array<ResponseTaskType>\r\n}\r\n\r\nexport let initialState: TaskStateType = {}\r\n\r\nexport const taskReducer = (state = initialState, action: ActionType): TaskStateType => {\r\n    switch (action.type) {\r\n        case 'tasks/REMOVE-TASK': {\r\n            return {\r\n                ...state,\r\n                [action.payload.todolistId]: state[action.payload.todolistId].filter(t =>\r\n                    t.id !== action.payload.taskId)\r\n            }\r\n        }\r\n        case 'tasks/ADD-TASK': {\r\n            return {\r\n                ...state,\r\n                [action.payload.task.todoListId]: [action.payload.task, ...state[action.payload.task.todoListId]],\r\n            }\r\n        }\r\n\r\n        case 'tasks/CHANGE-TASK-STATUS': {\r\n            return {\r\n                ...state,\r\n                [action.payload.todolistId]: state[action.payload.todolistId].map(t =>\r\n                    t.id === action.payload.taskId\r\n                        ? {...t, status: action.payload.status}\r\n                        : t)\r\n            }\r\n        }\r\n        case 'tasks/CHANGE-TASK-TITLE': {\r\n            return {\r\n                ...state,\r\n                [action.payload.todolistId]: state[action.payload.todolistId].map(t =>\r\n                    t.id === action.payload.taskId\r\n                        ? {...t, title: action.payload.title}\r\n                        : t)\r\n            }\r\n        }\r\n        case \"tasks/SET_TASKS\": {\r\n            return {\r\n                ...state,\r\n                [action.payload.todoListId]: action.payload.tasks\r\n            }\r\n        }\r\n        case \"todos/ADD-TODOLIST\":\r\n            return {\r\n                ...state, [action.payload.todolist.id]:[]\r\n            }\r\n        case 'todos/SET-TODOS': {\r\n            const stateCopy = {...state}\r\n            action.todos.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy;\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//Action Types\r\nexport type ActionType = removeTaskACType |\r\n    addTaskACType |\r\n    changeTaskStatusACType |\r\n    changeTaskTitleACType |\r\n    addArrayTaskACType |\r\n    setTaskACType |\r\n    setTodoListsACType | addTodoListACType\r\n\r\n\r\n// Action Creators\r\nexport type removeTaskACType = ReturnType<typeof removeTaskAC>\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => (\r\n    {\r\n        type: 'tasks/REMOVE-TASK',\r\n        payload: {taskId, todolistId}\r\n    } as const)\r\n\r\nexport type addTaskACType = ReturnType<typeof addTaskAC>\r\nexport const addTaskAC = (task: ResponseTaskType) => (\r\n    {\r\n        type: 'tasks/ADD-TASK',\r\n        payload: {\r\n            task\r\n        }\r\n    } as const)\r\n\r\nexport type changeTaskStatusACType = ReturnType<typeof changeTaskStatusAC>\r\nexport const changeTaskStatusAC = (status: TaskStatuses, taskId: string, todolistId: string) => ({\r\n    type: 'tasks/CHANGE-TASK-STATUS',\r\n    payload: {\r\n        status,\r\n        taskId,\r\n        todolistId\r\n    }\r\n} as const)\r\n\r\nexport type changeTaskTitleACType = ReturnType<typeof changeTaskTitleAC>\r\nexport const changeTaskTitleAC = (title:string, taskId:string, todolistId:string) => ({\r\n    type: 'tasks/CHANGE-TASK-TITLE',\r\n    payload: {\r\n        title,\r\n        taskId,\r\n        todolistId\r\n    }\r\n} as const)\r\n\r\nexport type addArrayTaskACType = ReturnType<typeof addArrayTaskAC>\r\nexport const addArrayTaskAC = (todoListId: string) => ({type: 'tasks/ADD-ARRAY-TASK', payload: {todoListId}} as const)\r\n\r\nexport type setTaskACType = ReturnType<typeof setTaskAC>\r\nexport const setTaskAC = (tasks: Array<ResponseTaskType>, todoListId: string) => ({\r\n    type: 'tasks/SET_TASKS',\r\n    payload: {tasks, todoListId}\r\n} as const)\r\n\r\n\r\n//Thunk Creators\r\nexport const getTasks = (todoListId: string) => async (dispatch: Dispatch) => {\r\n    try {\r\n        let data = await tasksAPI.getTasks(todoListId)\r\n        dispatch(setTaskAC(data.items, todoListId))\r\n\r\n    } catch (e: any) {\r\n        console.warn(e)\r\n    }\r\n}\r\nexport const deleteTask = (taskId: string, todolistId: string) => async (dispatch: Dispatch) => {\r\n    try {\r\n        let {data} = await tasksAPI.deleteTask(todolistId, taskId)\r\n        if (data.resultCode === 0) {\r\n            dispatch(removeTaskAC(taskId, todolistId))\r\n        }\r\n    } catch (e: any) {\r\n        throw new Error('что то не так')\r\n    }\r\n}\r\nexport const createFetchedTask = (title: string, todolistId: string) => async (dispatch: Dispatch) => {\r\n    try {\r\n        let {data} = await tasksAPI.createTask(todolistId, title)\r\n        if (data.resultCode === 0) {\r\n            dispatch(addTaskAC(data.data.item))\r\n        }\r\n    } catch (e: any) {\r\n\r\n    }\r\n}\r\nexport const updateFetchedTaskStatus = (todolistId: string, taskId: string, status: TaskStatuses) => {\r\n    return async (dispatch: Dispatch, getState: () => rootReducerType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if(!task) {\r\n            console.warn(\"task not found in the state\")\r\n            return\r\n        }\r\n\r\n        const model: UpdateTaskModelType = {\r\n            status: status,\r\n            title: task.title,\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n        }\r\n        try {\r\n            await tasksAPI.updateTaskStatus(todolistId, taskId, model)\r\n            dispatch(changeTaskStatusAC(status, taskId, todolistId))\r\n\r\n        } catch (e: any) {\r\n\r\n        }\r\n    }\r\n}\r\nexport const updateFetchedTaskTitle = (todolistId: string, taskId: string, title: string) => {\r\n    return async (dispatch: Dispatch, getState: () => rootReducerType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if(!task) {\r\n            console.warn(\"task not found in the state\")\r\n            return\r\n        }\r\n\r\n        const model: UpdateTaskModelType = {\r\n            status: task.status,\r\n            title: title,\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n        }\r\n        try {\r\n            await tasksAPI.updateTaskTitle(todolistId, taskId, model)\r\n            dispatch(changeTaskTitleAC(title, taskId, todolistId))\r\n\r\n        } catch (e: any) {\r\n\r\n        }\r\n    }\r\n}","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1',\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"4c618d05-4087-4c56-9fa2-e412fa4c037d\"\r\n    }\r\n})\r\n\r\nexport const toDoAPI = {\r\n    getTodos() {\r\n        return instance.get<Array<TodoType>>('/todo-lists')\r\n    },\r\n    createTodo(title: string) {\r\n        return instance.post<CommonResponseType<{ item: TodoType }>>(`/todo-lists`, {title})\r\n            .then(res => res.data)\r\n    },\r\n    deleteTodo(todolistId: string) {\r\n        return instance.delete<CommonResponseType>(`/todo-lists/${todolistId}`)\r\n    },\r\n    updateTodoTitle(todolistId: string, title: string) {\r\n        return instance.put<CommonResponseType>(`/todo-lists/${todolistId}`, {title})\r\n    }\r\n}\r\n\r\n\r\n// берем типы из документации апи\r\nexport type TodoType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\n// дженерик типизация (если не значение типа data, то по умолчанию берем пустой объект)\r\ntype CommonResponseType<T = {}> = {\r\n    resultCode: number\r\n    messages: string []\r\n    fieldsErrors: string []\r\n    data: T\r\n}","import {Dispatch} from \"redux\";\r\nimport {toDoAPI, TodoType} from \"../api/todoApi\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\nexport type TodoDomainType = TodoType & {\r\n    filter: FilterValuesType\r\n}\r\n\r\nlet initialState: Array<TodoDomainType> = []\r\n\r\n\r\nexport const toDoReducer = (state = initialState, action: ActionType): Array<TodoDomainType> => {\r\n    switch (action.type) {\r\n        case \"todos/REMOVE-TODOLIST\":\r\n            return state.filter(tl => tl.id !== action.payload.id)\r\n        case \"todos/ADD-TODOLIST\":\r\n            const newTodolist:TodoDomainType = {...action.payload.todolist, filter:'all'}\r\n            return [newTodolist,...state]\r\n        case \"todos/CHANGE-TODOLIST_TITLE\":\r\n            return {\r\n                ...state.map(s => s.id === action.payload.id\r\n                        ?\r\n                        {...s, title: action.payload.title}\r\n                        : s)\r\n            }\r\n        case \"todos/CHANGE-TODOLIST_FILTER\":\r\n            return {\r\n                ...state.map(s => s.id === action.payload.id\r\n                        ?\r\n                        {...s, filter: action.payload.filter}\r\n                        : s)\r\n            }\r\n        case \"todos/SET-TODOS\":\r\n            return action.todos.map(tl => ({\r\n                    ...tl,\r\n                    filter: 'all'\r\n                }))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//Action Types\r\nexport type ActionType = removeTodoListACType |\r\n    addTodoListACType |\r\n    changeTodoListTitleACType |\r\n    changeTodoListFilterACType |\r\n    setTodoListsACType\r\n\r\n// Action Creators\r\nexport type removeTodoListACType = ReturnType<typeof removeTodoListAC>\r\nexport const removeTodoListAC = (id: string) => ({type: \"todos/REMOVE-TODOLIST\", payload: {id}} as const)\r\n\r\nexport type setTodoListsACType = ReturnType<typeof setTodoListsAC>\r\nexport const setTodoListsAC = (todos: Array<TodoType>) => ({type: \"todos/SET-TODOS\", todos} as const)\r\n\r\nexport type addTodoListACType = ReturnType<typeof addTodoListAC>\r\nexport const addTodoListAC = (todolist: TodoType) => ({\r\n    type: \"todos/ADD-TODOLIST\",\r\n    payload: {todolist}\r\n} as const)\r\n\r\nexport type changeTodoListTitleACType = ReturnType<typeof changeTodoListTitleAC>\r\nexport const changeTodoListTitleAC = (id: string, title: string) => ({\r\n    type: \"todos/CHANGE-TODOLIST_TITLE\",\r\n    payload: {\r\n        title,\r\n        id\r\n    }\r\n} as const)\r\n\r\nexport type changeTodoListFilterACType = ReturnType<typeof changeTodoListFilterAC>\r\nexport const changeTodoListFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: \"todos/CHANGE-TODOLIST_FILTER\", payload: {\r\n        filter,\r\n        id\r\n    }\r\n} as const)\r\n\r\n\r\n//Thunk Creators\r\nexport const getTodoLists = () => async (dispatch: Dispatch) => {\r\n    try {\r\n        let {data} = await toDoAPI.getTodos()\r\n        dispatch(setTodoListsAC(data))\r\n    } catch (e: any) {\r\n        throw new Error('ERROR')\r\n    }\r\n}\r\n\r\nexport const deleteFetchedTodolist = (todolistId: string) => async (dispatch: Dispatch) => {\r\n    try {\r\n        let {data} = await toDoAPI.deleteTodo(todolistId)\r\n        if (data.resultCode === 0) {\r\n            dispatch(removeTodoListAC(todolistId))\r\n        }\r\n    } catch (e: any) {\r\n        console.warn('ERROR')\r\n    }\r\n}\r\n\r\nexport const updateFetchedTodoTitle = (todolistId: string, title: string) => async (dispatch: Dispatch) => {\r\n    try {\r\n        let {data} = await toDoAPI.updateTodoTitle(todolistId, title)\r\n        if (data.resultCode === 0) {\r\n            dispatch(changeTodoListTitleAC(todolistId, title))\r\n        }\r\n    } catch (e: any) {\r\n        console.warn('ERROR')\r\n    }\r\n}\r\n\r\nexport const createTodolist = (title: string) => async (dispatch: Dispatch) => {\r\n    try {\r\n        let {data} = await toDoAPI.createTodo(title)\r\n        dispatch(addTodoListAC(data.item))\r\n\r\n    } catch (e: any) {\r\n        console.warn('ERROR')\r\n    }\r\n}\r\n\r\n\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {taskReducer} from \"./task-reducer\";\r\nimport {toDoReducer} from \"./todo-reducer\";\r\nimport {TypedUseSelectorHook, useSelector} from \"react-redux\";\r\nimport thunk from \"redux-thunk\";\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n    tasks: taskReducer,\r\n    todoLists: toDoReducer\r\n})\r\n\r\nexport type rootReducerType = ReturnType<typeof rootReducer>\r\n\r\n\r\n\r\nexport let store = createStore(rootReducer, applyMiddleware(thunk))\r\nexport type AppStoreType = typeof store\r\n\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<rootReducerType> = useSelector;\r\n\r\n//@ts-ignore\r\nwindow.store = store","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@mui/material\";\r\nimport {AddBox} from \"@mui/icons-material\";\r\n\r\n\r\ntype AddItemFormPropsType = {\r\n    callBack: (value: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo( ({\r\n                                callBack,\r\n                                ...props\r\n                            }: AddItemFormPropsType) => {\r\n\r\n    const [newTaskTitle, setNewTaskTitle] = useState(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n\r\n\r\n    const addItem = () => {\r\n        if (newTaskTitle.trim()) {\r\n            callBack(newTaskTitle)\r\n            setNewTaskTitle(\"\")\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n\r\n\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTaskTitle(e.currentTarget.value)\r\n        setError(null)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if(error !== null)\r\n        setError(null)\r\n        if (e.key === \"Enter\" && newTaskTitle.trim()) {\r\n            callBack(newTaskTitle)\r\n            setNewTaskTitle(\"\")\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <TextField variant={\"outlined\"}\r\n                       value={newTaskTitle}\r\n                       size={\"small\"}\r\n                       color={'secondary'}\r\n                       onChange={onChangeTitleHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       error={!!error}\r\n                       helperText={error && \"Title is required!\"}\r\n                       label={'title'}\r\n                       sx={{\r\n                           input: {\r\n                               height: \"20px\"\r\n                           }\r\n                       }}\r\n            />\r\n\r\n            <IconButton onClick={addItem} color={\"secondary\"}>\r\n                <AddBox color={\"inherit\"}/>\r\n            </IconButton>\r\n\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@mui/material\";\r\nimport {ModeEditOutline} from \"@mui/icons-material\";\r\n\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    callBack: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [title, setTitle] = useState(\"\")\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n        if (props.title) {\r\n            setTitle(props.title)\r\n        }\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.callBack(title)\r\n    }\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            offEditMode()\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField variant={'standard'}\r\n                         sx={{width: \"130px\"}}\r\n                         value={title}\r\n                         color={\"secondary\"}\r\n                         onBlur={offEditMode}\r\n                         autoFocus\r\n                         onChange={onChangeTitleHandler}\r\n                         onKeyPress={onKeyPressHandler}/>\r\n            : <span onDoubleClick={onEditMode}>{props.title}\r\n                <IconButton onClick={onEditMode}>\r\n                    <ModeEditOutline fontSize={\"small\"}/>\r\n                </IconButton>\r\n        </span>\r\n    )\r\n})","import React, {ChangeEvent, FC, useCallback} from \"react\";\r\nimport {Checkbox, ListItem} from \"@mui/material\";\r\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\r\nimport IconButton from \"@mui/material/IconButton/IconButton\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport {ResponseTaskType, TaskStatuses} from \"../../api/tasksApi\";\r\n\r\n\r\ntype TaskPropsType = {\r\n    task: ResponseTaskType\r\n    changeTaskTitle: (taskId: string, title: string) => void\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses) => void\r\n    removeTask: (taskId: string) => void\r\n}\r\n\r\nexport const Task: FC<TaskPropsType> = React.memo(({\r\n                                                       task,\r\n                                                       changeTaskTitle,\r\n                                                       changeTaskStatus,\r\n                                                       removeTask\r\n                                                   }) => {\r\n\r\n    const changeTaskStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let value = e.currentTarget.checked\r\n        changeTaskStatus(task.id, value ? TaskStatuses.Completed : TaskStatuses.New)\r\n    }\r\n    const changeTaskTitleHandler = useCallback((title: string) => {\r\n        changeTaskTitle(task.id, title)\r\n    }, [changeTaskTitle, task.id])\r\n\r\n    return <div>\r\n        <ListItem\r\n            disableGutters\r\n            divider\r\n            sx={{paddingTop: \"0px,3px\", display: \"flex\", justifyContent: \"space-between\"}}\r\n            key={task.id}\r\n            className={task.status === TaskStatuses.Completed ? \"isDone\" : \"\"}>\r\n            <Checkbox checked={task.status === TaskStatuses.Completed} color={'secondary'}\r\n                      onChange={changeTaskStatusHandler}/>\r\n            <EditableSpan title={task.title} callBack={changeTaskTitleHandler}/>\r\n            <IconButton onClick={() => removeTask(task.id)} color={\"secondary\"}>\r\n                <DeleteIcon/>\r\n            </IconButton>\r\n        </ListItem>\r\n    </div>\r\n\r\n})","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from \"../../../AddItemForm\";\r\nimport {EditableSpan} from \"../../EditableSpan/EditableSpan\";\r\nimport IconButton from \"@mui/material/IconButton/IconButton\";\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport {Button, List, Typography} from \"@mui/material\";\r\nimport {\r\n    changeTodoListFilterAC,\r\n    deleteFetchedTodolist,\r\n    FilterValuesType,\r\n    updateFetchedTodoTitle\r\n} from \"../../../Redux/todo-reducer\";\r\nimport {Task} from \"../../Task/Task\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {\r\n    createFetchedTask,\r\n    deleteTask,\r\n    getTasks,\r\n    updateFetchedTaskStatus,\r\n    updateFetchedTaskTitle\r\n} from \"../../../Redux/task-reducer\";\r\nimport {ResponseTaskType, TaskStatuses} from \"../../../api/tasksApi\";\r\n\r\n\r\ntype toDoListPropsType = {\r\n    id: string\r\n    filter: FilterValuesType\r\n    title: string\r\n    tasks: Array<ResponseTaskType>\r\n}\r\n\r\nexport const Todolist = React.memo(({id, filter, title, tasks}: toDoListPropsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(getTasks(id))\r\n    }, [])\r\n\r\n    const removeTask = useCallback((taskId: string) => {\r\n        dispatch(deleteTask(taskId, id))\r\n    }, [dispatch, id])\r\n\r\n    const addTask = useCallback((newTaskTitle: string) => {\r\n        dispatch(createFetchedTask(newTaskTitle, id))\r\n    }, [dispatch, id])\r\n\r\n    const changeTaskStatus = useCallback((taskId: string, status: TaskStatuses) => {\r\n        dispatch(updateFetchedTaskStatus(id,taskId, status))\r\n    }, [dispatch,id])\r\n\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        dispatch(updateFetchedTodoTitle(id, title))\r\n    }, [dispatch, id])\r\n\r\n    const removeTodolist = useCallback(() => {\r\n        dispatch(deleteFetchedTodolist(id))\r\n    }, [dispatch, id])\r\n\r\n    const changeButtonFilter = useCallback((filter: FilterValuesType) => {\r\n        dispatch(changeTodoListFilterAC(id, filter))\r\n       }, [dispatch, id])\r\n\r\n    const changeTaskTitle = useCallback((taskId: string, title: string) => {\r\n        dispatch(updateFetchedTaskTitle(id, taskId, title))\r\n    }, [dispatch, id])\r\n\r\n\r\n    let taskForTodolist = tasks;\r\n\r\n    if (filter === \"active\") {\r\n        taskForTodolist = tasks.filter(t => t.status === TaskStatuses.New);\r\n    }\r\n    if (filter === \"completed\") {\r\n        taskForTodolist = tasks.filter(t => t.status === TaskStatuses.Completed);\r\n    }\r\n\r\n    const tasksElements = taskForTodolist.map(t => {\r\n        return <Task changeTaskStatus={changeTaskStatus}\r\n                     task={t}\r\n                     changeTaskTitle={changeTaskTitle}\r\n                     removeTask={removeTask}\r\n                     key={t.id}/>\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <Typography variant=\"h6\" align={'center'}>\r\n                <EditableSpan title={title} callBack={changeTodolistTitle}/>\r\n                <IconButton color={\"secondary\"} onClick={removeTodolist}>\r\n                    <DeleteIcon/>\r\n                </IconButton>\r\n            </Typography>\r\n            <AddItemForm callBack={addTask}/>\r\n            <List>\r\n                {tasksElements}\r\n            </List>\r\n            <div>\r\n                <Button variant={filter === 'all' ? \"contained\" : \"text\"} color={\"secondary\"}\r\n                        onClick={() => changeButtonFilter('all')}>all</Button>\r\n                <Button variant={filter === 'active' ? \"contained\" : \"text\"} color={\"secondary\"}\r\n                        onClick={() => changeButtonFilter('active')}>active </Button>\r\n                <Button variant={filter === 'completed' ? \"contained\" : \"text\"} color={\"secondary\"}\r\n                        onClick={() => changeButtonFilter('completed')}> completed</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n","import {Grid, Paper} from \"@mui/material\";\r\nimport {Todolist} from \"./Todolist/todolist\";\r\nimport React, {useEffect} from \"react\";\r\nimport {useTypedSelector} from \"../../Redux/Redux-store\";\r\nimport {getTodoLists, TodoDomainType} from \"../../Redux/todo-reducer\";\r\nimport {TaskStateType} from \"../../Redux/task-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n\r\nexport const TodoLists = () => {\r\n\r\n\r\n    const todoLists = useTypedSelector<TodoDomainType[]>(state => state.todoLists)\r\n    const tasks = useTypedSelector<TaskStateType>(state => state.tasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(getTodoLists())\r\n    }, [])\r\n\r\n\r\n    const todolistComponents = todoLists.map(tl => {\r\n\r\n        let tasksForRender = tasks[tl.id]\r\n        return (<Grid item key={tl.id}>\r\n                <Paper elevation={2} sx={{padding: \"10px\"}}>\r\n                    <Todolist\r\n                        key={tl.id}\r\n                        id={tl.id}\r\n                        title={tl.title}\r\n                        filter={tl.filter}\r\n                        tasks={tasksForRender}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n    return <>\r\n        {todolistComponents}\r\n    </>\r\n}","import React, {useCallback} from 'react';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Toolbar, Typography} from \"@mui/material\";\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport './App.css'\r\nimport {createTodolist} from \"./Redux/todo-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {TodoLists} from \"./components/Todolists/Todolists\";\r\n\r\n\r\nexport const App = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(createTodolist(title))\r\n    }, [dispatch])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <AppBar position=\"static\" color={\"secondary\"}>\r\n                <Toolbar>\r\n                    <IconButton\r\n                        size=\"large\"\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"menu\"\r\n                        sx={{mr: 2}}\r\n                    >\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\r\n                        TodoLists\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container sx={{padding: \"20px 0\", marginBottom: \"30px\"}}>\r\n                    <AddItemForm callBack={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={4}>\r\n                    <TodoLists/>\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./Redux/Redux-store\";\r\nimport {App} from \"./App\";\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>,\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}