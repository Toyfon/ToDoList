{"version":3,"sources":["serviceWorker.ts","api/tasksApi.ts","AddItemForm.tsx","api/todoApi.ts","Redux/todo-reducer.ts","Redux/task-reducer.ts","components/EditableSpan/EditableSpan.tsx","components/Task/Task.tsx","components/Todolists/Todolist/todolist.tsx","Redux/Redux-store.ts","components/Todolists/Todolists.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","AddItemForm","React","memo","callBack","useState","newTaskTitle","setNewTaskTitle","error","setError","TextField","variant","value","size","color","onChange","e","currentTarget","onKeyPress","key","trim","helperText","label","sx","input","height","IconButton","onClick","AddBox","instance","axios","create","baseURL","withCredentials","headers","toDoAPI","get","initialState","todos","tasksAPI","todolistId","then","res","data","title","post","taskId","delete","model","put","removeTaskAC","type","payload","changeTaskStatusAC","status","setTaskAC","tasks","todoListId","EditableSpan","props","editMode","setEditMode","setTitle","onEditMode","offEditMode","width","onBlur","autoFocus","onDoubleClick","ModeEditOutline","fontSize","Task","task","changeTaskTitleCallback","changeTaskStatusCallback","onRemoveHandler","changeTaskTitleHandler","useCallback","id","ListItem","disableGutters","divider","paddingTop","display","justifyContent","className","Completed","Checkbox","checked","New","Todolist","filter","changeFilter","changeTaskStatus","removeTodolist","changeTaskTitle","changeTodolistTitle","dispatch","useDispatch","useEffect","a","items","console","warn","resultCode","Error","deleteTask","addTask","item","createFetchedTask","changeButtonFilter","removeTodolistHandler","changeTodolistTitleHandler","taskForTodolist","t","tasksElements","map","Typography","align","List","Button","rootReducer","combineReducers","state","action","stateCopy","forEach","tl","todoLists","newTodolist","s","store","createStore","applyMiddleware","thunk","useTypedSelector","useSelector","TodoLists","getState","find","deadline","description","priority","startDate","updateFetchedTaskStatus","changeTaskTitleAC","changeTodoListFilterAC","changeTodoListTitleAC","response","todolistComponents","tasksForRender","Grid","Paper","elevation","padding","App","addTodolist","v1","addTodoListAC","addArrayTaskAC","AppBar","position","Toolbar","edge","aria-label","mr","component","flexGrow","Container","fixed","container","marginBottom","spacing","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.ef33ca12.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\r\n\r\n\r\ntype CommonResponseType<T = {}> = {\r\n    resultCode: number\r\n    messages: string []\r\n    fieldsErrors: string []\r\n    data: T\r\n}\r\n\r\nexport type ResponseTasksType = {\r\n    totalCount: number\r\n    error: string\r\n    items: ResponseTaskType []\r\n}\r\n\r\n\r\nexport type ResponseTaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\n\r\nexport type  UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1',\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"4c618d05-4087-4c56-9fa2-e412fa4c037d\"\r\n    }\r\n})\r\n\r\n\r\nexport const tasksAPI = {\r\n    getTasks(todolistId: string) {\r\n        return instance.get<ResponseTasksType>(`/todo-lists/${todolistId}/tasks`).then(res => res.data)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<CommonResponseType<{ item: ResponseTaskType }>>(`/todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<CommonResponseType>(`/todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTaskStatus(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<CommonResponseType>(`/todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n}\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@mui/material\";\r\nimport {AddBox} from \"@mui/icons-material\";\r\n\r\n\r\ntype AddItemFormPropsType = {\r\n    callBack: (value: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo( ({\r\n                                callBack,\r\n                                ...props\r\n                            }: AddItemFormPropsType) => {\r\n\r\n    const [newTaskTitle, setNewTaskTitle] = useState(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n\r\n\r\n    const addItem = () => {\r\n        if (newTaskTitle.trim()) {\r\n            callBack(newTaskTitle)\r\n            setNewTaskTitle(\"\")\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n\r\n\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTaskTitle(e.currentTarget.value)\r\n        setError(null)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if(error !== null)\r\n        setError(null)\r\n        if (e.key === \"Enter\" && newTaskTitle.trim()) {\r\n            callBack(newTaskTitle)\r\n            setNewTaskTitle(\"\")\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <TextField variant={\"outlined\"}\r\n                       value={newTaskTitle}\r\n                       size={\"small\"}\r\n                       color={'secondary'}\r\n                       onChange={onChangeTitleHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       error={!!error}\r\n                       helperText={error && \"Title is required!\"}\r\n                       label={'title'}\r\n                       sx={{\r\n                           input: {\r\n                               height: \"20px\"\r\n                           }\r\n                       }}\r\n            />\r\n\r\n            <IconButton onClick={addItem} color={\"secondary\"}>\r\n                <AddBox color={\"inherit\"}/>\r\n            </IconButton>\r\n\r\n        </div>\r\n    )\r\n})","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1',\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"4c618d05-4087-4c56-9fa2-e412fa4c037d\"\r\n    }\r\n})\r\n\r\nexport const toDoAPI = {\r\n    getTodos() {\r\n        return instance.get<Array<TodoType>>('/todo-lists')\r\n    },\r\n    createTodo(title: string) {\r\n        return instance.post<CommonResponseType<{ item: TodoType }>>(`/todo-lists`, {title})\r\n            .then(res => res.data)\r\n    },\r\n    deleteTodo(todolistId: string) {\r\n        return instance.delete<CommonResponseType>(`/todo-lists/${todolistId}`)\r\n    },\r\n    updateTodoTitle(todolistId: string, title: string) {\r\n        return instance.put<CommonResponseType>(`/todo-lists/${todolistId}`, {title})\r\n    }\r\n}\r\n\r\n\r\n// берем типы из документации апи\r\nexport type TodoType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\n// дженерик типизация (если не значение типа data, то по умолчанию берем пустой объект)\r\ntype CommonResponseType<T = {}> = {\r\n    resultCode: number\r\n    messages: string []\r\n    fieldsErrors: string []\r\n    data: T\r\n}","import {Dispatch} from \"redux\";\r\nimport {toDoAPI} from \"../api/todoApi\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\n\r\nlet initialState = {\r\n    todos: [] as Array<TodolistType>\r\n}\r\nexport type InitStateType = typeof initialState\r\n\r\nexport const toDoReducer = (state = initialState, action: ActionType): InitStateType => {\r\n    switch (action.type) {\r\n        case \"todos/REMOVE-TODOLIST\":\r\n            return {\r\n                ...state,\r\n                todos: state.todos.filter(tl => tl.id !== action.payload.id)\r\n            }\r\n        case \"todos/ADD-TODOLIST\":\r\n            let newTodolist: TodolistType = {\r\n                ...action.payload,\r\n                filter: \"all\"\r\n            }\r\n            return {\r\n                ...state,\r\n                todos: [...state.todos, newTodolist]\r\n            }\r\n        case \"todos/CHANGE-TODOLIST_TITLE\":\r\n            return {\r\n                ...state,\r\n                todos: state.todos\r\n                    .map(s => s.id === action.payload.id\r\n                        ?\r\n                        {...s, title: action.payload.title}\r\n                        : s)\r\n            }\r\n        case \"todos/CHANGE-TODOLIST_FILTER\":\r\n            return {\r\n                ...state,\r\n                todos: state.todos\r\n                    .map(s => s.id === action.payload.id\r\n                        ?\r\n                        {...s, filter: action.payload.filter}\r\n                        : s)\r\n            }\r\n        case \"todos/SET-TODOS\":\r\n            return {\r\n                ...state, todos: action.todos.map(tl => ({\r\n                    ...tl,\r\n                    filter: 'all'\r\n                }))\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//Action Types\r\nexport type ActionType = removeTodoListACType |\r\n                         addTodoListACType |\r\n                         changeTodoListTitleACType |\r\n                         changeTodoListFilterACType |\r\n                         setTodoListsACType\r\n\r\n// Action Creators\r\nexport type removeTodoListACType = ReturnType<typeof removeTodoListAC>\r\nexport const removeTodoListAC = (id: string) => ({type: \"todos/REMOVE-TODOLIST\", payload: {id}} as const)\r\n\r\nexport type setTodoListsACType = ReturnType<typeof setTodoListsAC>\r\nexport const setTodoListsAC = (todos: Array<any>) => ({type: \"todos/SET-TODOS\", todos} as const)\r\n\r\nexport type addTodoListACType = ReturnType<typeof addTodoListAC>\r\nexport const addTodoListAC = (title: string, id: string) => ({\r\n    type: \"todos/ADD-TODOLIST\",\r\n    payload: {title, id}\r\n} as const)\r\n\r\nexport type changeTodoListTitleACType = ReturnType<typeof changeTodoListTitleAC>\r\nexport const changeTodoListTitleAC = (id: string, title: string) => ({\r\n    type: \"todos/CHANGE-TODOLIST_TITLE\",\r\n    payload: {\r\n        title,\r\n        id\r\n    }\r\n} as const)\r\n\r\nexport type changeTodoListFilterACType = ReturnType<typeof changeTodoListFilterAC>\r\nexport const changeTodoListFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: \"todos/CHANGE-TODOLIST_FILTER\", payload: {\r\n        filter,\r\n        id\r\n    }\r\n} as const)\r\n\r\n\r\n\r\n//Thunk Creators\r\nexport const getTodoLists = () => async (dispatch: Dispatch) => {\r\n    try {\r\n        let response = await toDoAPI.getTodos()\r\n        dispatch(setTodoListsAC(response.data))\r\n    } catch (e: any) {\r\n        throw new Error('ERROR')\r\n    }\r\n}\r\n\r\n\r\n\r\n","import {ResponseTaskType, tasksAPI, TaskStatuses, UpdateTaskModelType} from \"../api/tasksApi\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setTodoListsACType} from \"./todo-reducer\";\r\nimport {rootReducerType} from \"./Redux-store\";\r\n\r\n\r\nexport type TaskStateType = {\r\n    [key: string]: Array<ResponseTaskType>\r\n}\r\n\r\nexport let initialState: TaskStateType = {}\r\n\r\n\r\nexport const taskReducer = (state = initialState, action: ActionType): TaskStateType => {\r\n    switch (action.type) {\r\n        case 'tasks/REMOVE-TASK': {\r\n            return {\r\n                ...state,\r\n                [action.payload.todolistId]: state[action.payload.todolistId].filter(t =>\r\n                    t.id !== action.payload.taskId)\r\n            }\r\n        }\r\n        case 'tasks/ADD-TASK': {\r\n            return {\r\n                ...state,\r\n                [action.payload.task.todoListId]: [action.payload.task, ...state[action.payload.task.todoListId]],\r\n            }\r\n        }\r\n\r\n        case 'tasks/CHANGE-TASK-STATUS': {\r\n            return {\r\n                ...state,\r\n                [action.payload.todolistId]: state[action.payload.todolistId].map(t =>\r\n                    t.id === action.payload.taskId\r\n                        ? {...t, status: action.payload.status}\r\n                        : t)\r\n            }\r\n        }\r\n        case 'tasks/CHANGE-TASK-TITLE': {\r\n            return {\r\n                ...state,\r\n                [action.payload.todolistId]: state[action.payload.todolistId].map(t =>\r\n                    t.id === action.payload.taskId\r\n                        ? {...t, title: action.payload.title}\r\n                        : t)\r\n            }\r\n        }\r\n        case \"tasks/ADD-ARRAY-TASK\": {\r\n            return {\r\n                ...state,\r\n                [action.payload.todoListId]: []\r\n            }\r\n        }\r\n        case \"tasks/SET_TASKS\": {\r\n            return {\r\n                ...state,\r\n                [action.payload.todoListId]: action.payload.tasks\r\n            }\r\n        }\r\n        case 'todos/SET-TODOS': {\r\n            const stateCopy = {...state}\r\n            action.todos.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy;\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//Action Types\r\nexport type ActionType = removeTaskACType |\r\n    addTaskACType |\r\n    changeTaskStatusACType |\r\n    changeTaskTitleACType |\r\n    addArrayTaskACType |\r\n    setTaskACType |\r\n    setTodoListsACType\r\n\r\n\r\n// Action Creators\r\nexport type removeTaskACType = ReturnType<typeof removeTaskAC>\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => (\r\n    {\r\n        type: 'tasks/REMOVE-TASK',\r\n        payload: {taskId, todolistId}\r\n    } as const)\r\n\r\nexport type addTaskACType = ReturnType<typeof addTaskAC>\r\nexport const addTaskAC = (task: ResponseTaskType) => (\r\n    {\r\n        type: 'tasks/ADD-TASK',\r\n        payload: {\r\n            task\r\n        }\r\n    } as const)\r\n\r\nexport type changeTaskStatusACType = ReturnType<typeof changeTaskStatusAC>\r\nexport const changeTaskStatusAC = (status: TaskStatuses, taskId: string, todolistId: string) => ({\r\n    type: 'tasks/CHANGE-TASK-STATUS',\r\n    payload: {\r\n        status,\r\n        taskId,\r\n        todolistId\r\n    }\r\n} as const)\r\n\r\nexport type changeTaskTitleACType = ReturnType<typeof changeTaskTitleAC>\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string) => ({\r\n    type: 'tasks/CHANGE-TASK-TITLE',\r\n    payload: {\r\n        title,\r\n        taskId,\r\n        todolistId\r\n    }\r\n} as const)\r\n\r\nexport type addArrayTaskACType = ReturnType<typeof addArrayTaskAC>\r\nexport const addArrayTaskAC = (todoListId: string) => ({type: 'tasks/ADD-ARRAY-TASK', payload: {todoListId}} as const)\r\n\r\nexport type setTaskACType = ReturnType<typeof setTaskAC>\r\nexport const setTaskAC = (tasks: Array<ResponseTaskType>, todoListId: string) => ({\r\n    type: 'tasks/SET_TASKS',\r\n    payload: {tasks, todoListId}\r\n} as const)\r\n\r\n\r\n//Thunk Creators\r\nexport const getTasks = (todoListId: string) => async (dispatch: Dispatch) => {\r\n    try {\r\n        let data = await tasksAPI.getTasks(todoListId)\r\n        dispatch(setTaskAC(data.items, todoListId))\r\n\r\n    } catch (e: any) {\r\n        console.warn(e)\r\n    }\r\n}\r\n\r\nexport const deleteTask = (taskId: string, todolistId: string) => async (dispatch: Dispatch) => {\r\n    try {\r\n        let {data} = await tasksAPI.deleteTask(todolistId, taskId)\r\n        if (data.resultCode === 0) {\r\n            dispatch(removeTaskAC(taskId, todolistId))\r\n        }\r\n    } catch (e: any) {\r\n        throw new Error('что то не так')\r\n    }\r\n}\r\n\r\nexport const createFetchedTask = (title: string, todolistId: string) => async (dispatch: Dispatch) => {\r\n    try {\r\n        let {data} = await tasksAPI.createTask(todolistId, title)\r\n        if (data.resultCode === 0) {\r\n            dispatch(addTaskAC(data.data.item))\r\n        }\r\n    } catch (e: any) {\r\n\r\n    }\r\n}\r\n\r\n\r\nexport const updateFetchedTaskStatus = (todolistId: string, taskId: string, status: TaskStatuses) => {\r\n    return async (dispatch: Dispatch, getState: () => rootReducerType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if(!task) {\r\n            console.warn(\"task not found in the state\")\r\n            return\r\n        }\r\n\r\n        const model: UpdateTaskModelType = {\r\n            status: status,\r\n            title: task.title,\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n        }\r\n        try {\r\n            await tasksAPI.updateTaskStatus(todolistId, taskId, model)\r\n            dispatch(changeTaskStatusAC(status, taskId, todolistId))\r\n\r\n        } catch (e: any) {\r\n\r\n        }\r\n    }\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@mui/material\";\r\nimport {ModeEditOutline} from \"@mui/icons-material\";\r\n\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    callBack: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [title, setTitle] = useState(\"\")\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n        if (props.title) {\r\n            setTitle(props.title)\r\n        }\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.callBack(title)\r\n    }\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            offEditMode()\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField variant={'standard'}\r\n                         sx={{width: \"130px\"}}\r\n                         value={title}\r\n                         color={\"secondary\"}\r\n                         onBlur={offEditMode}\r\n                         autoFocus\r\n                         onChange={onChangeTitleHandler}\r\n                         onKeyPress={onKeyPressHandler}/>\r\n            : <span onDoubleClick={onEditMode}>{props.title}\r\n                <IconButton onClick={onEditMode}>\r\n                    <ModeEditOutline fontSize={\"small\"}/>\r\n                </IconButton>\r\n        </span>\r\n    )\r\n})","import React, {ChangeEvent, FC, useCallback} from \"react\";\r\nimport {Checkbox, ListItem} from \"@mui/material\";\r\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\r\nimport IconButton from \"@mui/material/IconButton/IconButton\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport {ResponseTaskType, TaskStatuses} from \"../../api/tasksApi\";\r\n\r\n\r\ntype TaskPropsType = {\r\n    task: ResponseTaskType\r\n    changeTaskTitleCallback: (taskId: string, title: string) => void\r\n    changeTaskStatusCallback: (taskId: string, status: TaskStatuses) => void\r\n    onRemoveHandler: (taskId: string) => void\r\n}\r\n\r\nexport const Task: FC<TaskPropsType> = React.memo(({\r\n                                                       task,\r\n                                                       changeTaskTitleCallback,\r\n                                                       changeTaskStatusCallback,\r\n                                                       onRemoveHandler\r\n                                                   }) => {\r\n\r\n    const changeTaskStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let value = e.currentTarget.checked\r\n        changeTaskStatusCallback(task.id, value ? TaskStatuses.Completed : TaskStatuses.New)\r\n    }\r\n    const changeTaskTitleHandler = useCallback((title: string) => {\r\n        changeTaskTitleCallback(task.id, title)\r\n    }, [changeTaskTitleCallback, task.id])\r\n\r\n    return <div>\r\n        <ListItem\r\n            disableGutters\r\n            divider\r\n            sx={{paddingTop: \"0px,3px\", display: \"flex\", justifyContent: \"space-between\"}}\r\n            key={task.id}\r\n            className={task.status === TaskStatuses.Completed ? \"isDone\" : \"\"}>\r\n            <Checkbox checked={task.status === TaskStatuses.Completed} color={'secondary'}\r\n                      onChange={changeTaskStatusHandler}/>\r\n            <EditableSpan title={task.title} callBack={changeTaskTitleHandler}/>\r\n            <IconButton onClick={() => onRemoveHandler(task.id)} color={\"secondary\"}>\r\n                <DeleteIcon/>\r\n            </IconButton>\r\n        </ListItem>\r\n    </div>\r\n\r\n})","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from \"../../../AddItemForm\";\r\nimport {EditableSpan} from \"../../EditableSpan/EditableSpan\";\r\nimport IconButton from \"@mui/material/IconButton/IconButton\";\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport {Button, List, Typography} from \"@mui/material\";\r\nimport {FilterValuesType} from \"../../../Redux/todo-reducer\";\r\nimport {Task} from \"../../Task/Task\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {createFetchedTask, deleteTask, getTasks} from \"../../../Redux/task-reducer\";\r\nimport {ResponseTaskType, TaskStatuses} from \"../../../api/tasksApi\";\r\n\r\n\r\ntype toDoListPropsType = {\r\n    id: string\r\n    filter: FilterValuesType\r\n    title: string\r\n    tasks: Array<ResponseTaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todolistId: string) => void\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, title: string, todolistId: string) => void\r\n    changeTodolistTitle: (title: string, todolistId: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo(({\r\n                                        id, filter,\r\n                                        title, tasks,\r\n                                        changeFilter,\r\n                                        changeTaskStatus,\r\n                                        removeTodolist,\r\n                                        changeTaskTitle,\r\n                                        changeTodolistTitle\r\n                                    }: toDoListPropsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(getTasks(id))\r\n    }, [])\r\n\r\n    const onRemoveHandler = useCallback((taskId: string) => {\r\n        dispatch(deleteTask(taskId, id))\r\n    }, [dispatch, id])\r\n    const addTask = useCallback((newTaskTitle: string) => {\r\n        dispatch(createFetchedTask(newTaskTitle, id))\r\n    }, [dispatch, id])\r\n    const changeButtonFilter = useCallback((filter: FilterValuesType) => changeFilter(filter, id), [changeFilter, id])\r\n    const removeTodolistHandler = useCallback(() => {\r\n        removeTodolist(id)\r\n    }, [removeTodolist, id])\r\n\r\n    const changeTodolistTitleHandler = useCallback((title: string) => {\r\n        changeTodolistTitle(title, id)\r\n    }, [changeTodolistTitle, id])\r\n\r\n    const changeTaskStatusCallback = useCallback((taskId: string, value: TaskStatuses) => {\r\n        changeTaskStatus(taskId, value, id)\r\n    }, [changeTaskStatus, id])\r\n\r\n    const changeTaskTitleCallback = useCallback((taskId: string, title: string) => {\r\n        changeTaskTitle(taskId, title, id)\r\n    }, [changeTaskTitle, id])\r\n\r\n\r\n    let taskForTodolist = tasks;\r\n\r\n    if (filter === \"active\") {\r\n        taskForTodolist = tasks.filter(t => t.status === TaskStatuses.New);\r\n    }\r\n    if (filter === \"completed\") {\r\n        taskForTodolist = tasks.filter(t => t.status === TaskStatuses.Completed);\r\n    }\r\n\r\n    const tasksElements = taskForTodolist.map(t => {\r\n        return <Task changeTaskStatusCallback={changeTaskStatusCallback}\r\n                     task={t}\r\n                     changeTaskTitleCallback={changeTaskTitleCallback}\r\n                     onRemoveHandler={onRemoveHandler}\r\n                     key={t.id}/>\r\n    })\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Typography variant=\"h6\" align={'center'}>\r\n                <EditableSpan title={title} callBack={changeTodolistTitleHandler}/>\r\n                <IconButton color={\"secondary\"} onClick={removeTodolistHandler}>\r\n                    <DeleteIcon/>\r\n                </IconButton>\r\n            </Typography>\r\n            <AddItemForm callBack={addTask}/>\r\n            <List>\r\n                {tasksElements}\r\n            </List>\r\n            <div>\r\n                <Button variant={filter === 'all' ? \"contained\" : \"text\"} color={\"secondary\"}\r\n                        onClick={() => changeButtonFilter('all')}>all</Button>\r\n                <Button variant={filter === 'active' ? \"contained\" : \"text\"} color={\"secondary\"}\r\n                        onClick={() => changeButtonFilter('active')}>active </Button>\r\n                <Button variant={filter === 'completed' ? \"contained\" : \"text\"} color={\"secondary\"}\r\n                        onClick={() => changeButtonFilter('completed')}> completed</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {taskReducer} from \"./task-reducer\";\r\nimport {toDoReducer} from \"./todo-reducer\";\r\nimport {TypedUseSelectorHook, useSelector} from \"react-redux\";\r\nimport thunk from \"redux-thunk\";\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n    tasks: taskReducer,\r\n    todoLists: toDoReducer\r\n})\r\n\r\nexport type rootReducerType = ReturnType<typeof rootReducer>\r\n\r\n\r\n\r\nexport let store = createStore(rootReducer, applyMiddleware(thunk))\r\nexport type AppStoreType = typeof store\r\n\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<rootReducerType> = useSelector;\r\n\r\n//@ts-ignore\r\nwindow.store = store","import {Grid, Paper} from \"@mui/material\";\r\nimport {Todolist} from \"./Todolist/todolist\";\r\nimport React, {useCallback, useEffect} from \"react\";\r\nimport {useTypedSelector} from \"../../Redux/Redux-store\";\r\nimport {\r\n    changeTodoListFilterAC,\r\n    changeTodoListTitleAC,\r\n    FilterValuesType,\r\n    getTodoLists,\r\n    removeTodoListAC,\r\n    TodolistType\r\n} from \"../../Redux/todo-reducer\";\r\nimport { changeTaskTitleAC, TaskStateType, updateFetchedTaskStatus} from \"../../Redux/task-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {TaskStatuses} from \"../../api/tasksApi\";\r\n\r\n\r\nexport const TodoLists = () => {\r\n\r\n\r\n    const todoLists = useTypedSelector<TodolistType[]>(state => state.todoLists.todos)\r\n    const tasks = useTypedSelector<TaskStateType>(state => state.tasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const changeTaskStatus = useCallback((taskId: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(updateFetchedTaskStatus(todolistId,taskId, status))\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((taskId: string, title: string, todolistId: string) => {\r\n        dispatch(changeTaskTitleAC(taskId, title, todolistId))\r\n    }, [dispatch])\r\n\r\n\r\n    const changeFilter = useCallback((filter: FilterValuesType, todolistId: string) => {\r\n        dispatch(changeTodoListFilterAC(todolistId, filter))\r\n    }, [dispatch])\r\n    const changeTodolistTitle = useCallback((title: string, todolistId: string) => {\r\n        dispatch(changeTodoListTitleAC(todolistId, title))\r\n    }, [dispatch])\r\n    const removeTodolist = useCallback((todolistId: string) => {\r\n        dispatch(removeTodoListAC(todolistId))\r\n    }, [dispatch])\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(getTodoLists())\r\n    }, [])\r\n\r\n\r\n\r\n    const todolistComponents = todoLists.map(tl => {\r\n\r\n        let tasksForRender = tasks[tl.id]\r\n        return (<Grid item key={tl.id}>\r\n                <Paper elevation={2} sx={{padding: \"10px\"}}>\r\n                    <Todolist\r\n                        key={tl.id}\r\n                        id={tl.id}\r\n                        title={tl.title}\r\n                        filter={tl.filter}\r\n                        tasks={tasksForRender}\r\n                        changeFilter={changeFilter}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        removeTodolist={removeTodolist}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        changeTodolistTitle={changeTodolistTitle}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n    return <>\r\n        {todolistComponents}\r\n    </>\r\n}","import React, {useCallback} from 'react';\r\nimport {v1} from \"uuid\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Toolbar, Typography} from \"@mui/material\";\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport './App.css'\r\nimport {addTodoListAC} from \"./Redux/todo-reducer\";\r\nimport {addArrayTaskAC} from \"./Redux/task-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {TodoLists} from \"./components/Todolists/Todolists\";\r\n\r\n\r\nfunction App() {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const todoListId = v1()\r\n        dispatch(addTodoListAC(title, todoListId))\r\n        dispatch(addArrayTaskAC(todoListId))\r\n    }, [dispatch])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <AppBar position=\"static\" color={\"secondary\"}>\r\n                <Toolbar>\r\n                    <IconButton\r\n                        size=\"large\"\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"menu\"\r\n                        sx={{mr: 2}}\r\n                    >\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\r\n                        TodoLists\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container sx={{padding: \"20px 0\", marginBottom: \"30px\"}}>\r\n                    <AddItemForm callBack={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={4}>\r\n                    <TodoLists/>\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from \"./App\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./Redux/Redux-store\";\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>,\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}